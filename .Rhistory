"Primary Education" = "#B3242B",
"Secondary Education" = "#333333",
"Tertiary Education" = "#006400"),  # Custom color mapping
type = 'bar'                                # Bar chart type
) %>%
layout(
title = "Public Sector Wage Premium by Education Level (Compared to Private Formal Workers)",
xaxis = list(
title = "Education Level",              # X-axis title
tickangle = 0                           # Horizontal labels
),
yaxis = list(
title = "Wage Premium (%)"              # Y-axis title
),
barmode = 'group',                        # Group bars by education level
bargap = 0.2,                             # Adjust gap between bars
showlegend = TRUE,                        # Show legend to distinguish between education levels
legend = list(
title = list(text = "Education Level")  # Title for the legend
)
)
})
output$downloadAllGraphsWord <- downloadHandler(
filename = function() {
paste0("Selected_Graphs_", Sys.Date(), ".docx")
},
content = function(file) {
# Create a new Word document
doc <- read_docx()
# Add graphs based on user selection
if ("wageBillGraph" %in% input$selected_graphs_all) {
# Render the Wage Bill Graph
wage_bill_graph <- ggplot(selected_data(), aes(x = year, y = value, color = country_name)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(
title = ifelse(input$indicator == "Wage bill as a percentage of GDP",
"Wage Bill as % of GDP Over Time",
"Wage Bill as % of Public Expenditure Over Time"),
x = "Year",
y = ifelse(input$indicator == "Wage bill as a percentage of GDP",
"Wage Bill (% of GDP)", "Wage Bill (%)")
) +
theme_minimal()
# Add Wage Bill Graph to the document
doc <- doc %>%
body_add_par("Wage Bill Graph", style = "heading 1") %>%
body_add_gg(value = wage_bill_graph, width = 6, height = 4)
}
if ("firstGraph" %in% input$selected_graphs_all) {
# Render the First Public Sector Graph
data_to_plot <- public_sector_emp_temp_last %>%
filter(country_name %in% input$countries_first)
data_to_plot_long <- data_to_plot %>%
select(country_name, indicator_label, year, value) %>%
mutate(indicator_name = factor(indicator_label))
first_graph <- ggplot(data_to_plot_long, aes(x = country_name, y = value, color = indicator_name)) +
geom_point(size = 3) +
labs(
title = "Public Sector Employment (Multi-Country)",
x = "Country",
y = "Value"
) +
theme_minimal()
# Add First Public Sector Graph to the document
doc <- doc %>%
body_add_par("First Graph: Public Sector Employment (Multi-Country)", style = "heading 1") %>%
body_add_gg(value = first_graph, width = 6, height = 4)
}
if ("secondGraph" %in% input$selected_graphs_all) {
# Render the Second Public Sector Graph
data_to_plot <- public_sector_emp_temp %>%
filter(country_name == input$country_second)
data_to_plot_long <- data_to_plot %>%
select(year, indicator_label, value) %>%
mutate(indicator_label = factor(indicator_label))
second_graph <- ggplot(data_to_plot_long, aes(x = year, y = value, color = indicator_label)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = paste("Public Sector Employment in", input$country_second, "Over Time"),
x = "Year",
y = "Employment Value"
) +
theme_minimal()
# Add Second Public Sector Graph to the document
doc <- doc %>%
body_add_par("Second Graph: Public Sector Employment (Single Country)", style = "heading 1") %>%
body_add_gg(value = second_graph, width = 6, height = 4)
}
if ("dotPlot" %in% input$selected_graphs_all) {
# Render the Dot Plot Graph
filtered_data <- merged_data %>%
filter(country_name %in% input$countries_first)  # Ensure countries_first is used
first_country <- ifelse(length(input$countries_first) > 0, input$countries_first[1], NULL)
filtered_data <- filtered_data %>%
mutate(color = ifelse(country_name == first_country, "#B3242B", "#003366"))
dot_plot_graph <- ggplot(filtered_data, aes(x = log_gdp, y = indicator_value, label = country_name)) +
geom_point(aes(color = color), size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "gray", linetype = "dashed") +
scale_color_identity() +
geom_text(nudge_y = 0.2, size = 3) +
labs(
title = "Wage Bill vs. Log(GDP per Capita)",
x = "Log(GDP per Capita, 2015)",
y = "Wage Bill"
) +
theme_minimal()
# Add Dot Plot Graph to the document
doc <- doc %>%
body_add_par("Dot Plot: Wage Bill vs. Log(GDP per Capita)", style = "heading 1") %>%
body_add_gg(value = dot_plot_graph, width = 6, height = 4)
}
# Save the document
print(doc, target = file)
}
)
#Public Sector Graphs
# First Graph (Multiple Countries)
output$firstGraphpublic <- renderPlotly({
data_to_plot <- public_sector_emp_temp_last %>%
filter(country_name %in% input$countries_first)
data_to_plot_long <- data_to_plot %>%
select(country_name, indicator_label, year, value) %>%
mutate(indicator_label = factor(indicator_label)) # Fixed: Added missing parenthesis
plot <- plot_ly(data = data_to_plot_long,
x = ~country_name,
y = ~value,
color = ~indicator_label,
type = 'scatter',
mode = 'markers',
marker = list(size = 8)) %>%
layout(title = "Public sector employment (last year available)",
xaxis = list(title = "Country", tickangle = 45),
yaxis = list(title = "Value"),
legend = list(title = list(text = "Indicator")))
plot
})
# Second Graph (Single Country) by Time
output$secondGraphpublic <- renderPlotly({
data_to_plot <- public_sector_emp_temp %>%
filter(country_name == input$country_second)  # Single country selection
data_to_plot_long <- data_to_plot %>%
select(year, indicator_label, value) %>%
mutate(indicator_label = factor(indicator_label))  # Fixed: Ensure indicator_label is a factor
plot <- plot_ly(
data = data_to_plot_long,
x = ~year,
y = ~value,
color = ~indicator_label,  # Color each indicator differently
text = ~paste("Value:", round(value, 2)),  # Tooltip with value
type = 'scatter',
mode = 'lines+markers',  # Add lines and markers
marker = list(size = 8)  # Set marker size
) %>%
layout(
title = paste("Public sector employment,", input$country_second, "over time"),
xaxis = list(title = "Year", tickangle = 45, dtick = 2),
yaxis = list(title = "Wage Premium Value"),
legend = list(title = list(text = "Indicator"))
)
# Add annotations
plot <- plot %>%
add_annotations(
x = data_to_plot_long$year,
y = data_to_plot_long$value,  # Add offset to place annotation above the point
text = round(data_to_plot_long$value, 2),  # Display value as annotation
showarrow = FALSE,  # Remove arrows
font = list(size = 12, color = "black"),
xanchor = "center",  # Center annotation horizontally
yanchor = "bottom"   # Position annotation above the point
)
plot
})
# Download Handler
output$downloadGraphsWord <-  downloadHandler(
filename = function() {
paste0("Public_Sector_Analysis_", Sys.Date(), ".docx")
},
content = function(file) {
# Ensure input is passed correctly
print(input$countries_first)
print(input$country_second)
# Extract the first selected country for dynamic title
if (!is.null(input$countries_first) && length(input$countries_first) > 0) {
countries <- input$countries_first[1]  # Take the first country
} else {
countries <- "Unknown Country"  # Fallback in case no country is selected
}
# Dynamic title with the first country
report_title <- paste("Public Sector Employment Analysis Report -", countries)
doc <- read_docx()  # Start a new Word document
# Define the style for the title
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
# Apply the custom title style
doc <- doc %>%
body_add_fpar(fpar(ftext(report_title, prop = title_style)))
# Add introduction
doc <- doc %>%
body_add_par("Introduction", style = "heading 2") %>%
body_add_par("This report presents evidence on public sector employment and compensation practices for the selected countries. The analysis uses the latest data on public sector employment trends and provides insights into the composition and trends in public sector workforces.")
# Add graphs to the Word document
if ("firstGraph" %in% input$selected_graphs_public && length(input$countries_first) > 0) {
# Data for the first graph (Multi-Country)
data_to_plot <- public_sector_emp_temp_last %>%
filter(country_name %in% input$countries_first)
data_to_plot_long <- data_to_plot %>%
select(country_name, indicator_label, year, value) %>%
mutate(indicator_label = factor(indicator_label))
# Generate first graph (Multi-Country)
first_graph <- ggplot(data_to_plot_long, aes(x = country_name, y = value, color = indicator_label)) +
geom_point(size = 3) +
labs(title = "Public Sector Employment (Multi-Country)", x = "Country", y = "Value") +
theme_minimal()
# Save first graph as PNG (to the 'www' folder or appropriate path)
ggsave("C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI/first_graph.png", plot = first_graph, width = 6, height = 4)
# Add first graph to the Word document
doc <- doc %>%
body_add_par("First Graph: Public Sector Employment (Multi-Country)", style = "heading 1") %>%
body_add_img(src = "C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI/first_graph.png", width = 6, height = 4) %>%
body_add_par("This graph shows public sector employment across multiple countries.", style = "Normal")
}
if ("secondGraph" %in% input$selected_graphs_public && !is.null(input$country_second)) {
# Data for the second graph (Single Country)
data_to_plot <- public_sector_emp_temp %>%
filter(country_name == input$country_second)
data_to_plot_long <- data_to_plot %>%
select(year, indicator_label, value) %>%
mutate(indicator_label = factor(indicator_label))
# Generate second graph (Single Country)
second_graph <- ggplot(data_to_plot_long, aes(x = year, y = value, color = indicator_label)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = paste("Public Sector Employment in", input$country_second, "Over Time"), x = "Year", y = "Employment Value") +
theme_minimal()
# Save second graph as PNG (to the 'www' folder or appropriate path)
ggsave("C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI/second_graph.png", plot = second_graph, width = 6, height = 4)
# Add second graph to the Word document
doc <- doc %>%
body_add_par("Second Graph: Public Sector Employment (Single Country)", style = "heading 1") %>%
body_add_img(src = "C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI/second_graph.png", width = 6, height = 4) %>%
body_add_par("This graph shows public sector employment trends over time for the selected country.", style = "Normal")
}
# Save the Word document
print(doc, target = file)
}
)
#Public Sector Wage Premium by gender
# First Graph (Multiple Countries)
output$firstGraphgender <- renderPlotly({
data_to_plot <- gender_wage_premium_last %>%
filter(country_name %in% input$countries_first)
data_to_plot_long <- data_to_plot %>%
select(country_name, indicator_label, year, value) %>%
mutate(indicator_label = factor(indicator_label)) # Fixed: Added missing parenthesis
plot <- plot_ly(data = data_to_plot_long,
x = ~country_name,
y = ~value,
color = ~indicator_label,
type = 'scatter',
mode = 'markers',
marker = list(size = 8)) %>%
layout(title = "Public sector wage premium, by gender (last year available)",
xaxis = list(title = "Country", tickangle = 45),
yaxis = list(title = "Value"),
legend = list(title = list(text = "Indicator")))
plot
})
# Second Graph (Single Country) by Time
output$secondGraphgender <- renderPlotly({
data_to_plot <- gender_wage_premium %>%
filter(country_name == input$country_second)  # Single country selection
data_to_plot_long <- data_to_plot %>%
select(year, indicator_label, value) %>%
mutate(indicator_label = factor(indicator_label))  # Fixed: Ensure indicator_label is a factor
plot <- plot_ly(
data = data_to_plot_long,
x = ~year,
y = ~value,
color = ~indicator_label,  # Color each indicator differently
text = ~paste("Value:", round(value, 2)),  # Tooltip with value
type = 'scatter',
mode = 'lines+markers',  # Add lines and markers
marker = list(size = 8)  # Set marker size
) %>%
layout(
title = paste("Public sector wage premium, by gender in", input$country_second, "over time"),
xaxis = list(title = "Year", tickangle = 45, dtick = 2),
yaxis = list(title = "Wage Premium Value"),
legend = list(title = list(text = "Indicator"))
)
# Add annotations
plot <- plot %>%
add_annotations(
x = data_to_plot_long$year,
y = data_to_plot_long$value,  # Add offset to place annotation above the point
text = round(data_to_plot_long$value, 2),  # Display value as annotation
showarrow = FALSE,  # Remove arrows
font = list(size = 12, color = "black"),
xanchor = "center",  # Center annotation horizontally
yanchor = "bottom"   # Position annotation above the point
)
plot
})
# Download Handler
output$downloadGraphsWordgender <- downloadHandler(
filename = function() {
paste0("Wage_Premium_Gender_Graphs_", Sys.Date(), ".docx")
},
content = function(file) {
# Ensure input is passed correctly
print(input$countries_first)
print(input$country_second)
# Extract the first selected country for dynamic title
countries <- ifelse(!is.null(input$countries_first) && length(input$countries_first) > 0, input$countries_first[1], "Unknown Country")
# Dynamic title with the first country
report_title <- paste("Wage Premium Gender Analysis Report -", countries)
doc <- read_docx()  # Start a new Word document
# Define the style for the title
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
# Apply the custom title style
doc <- doc %>%
body_add_fpar(fpar(ftext(report_title, prop = title_style)))
# Add introduction
doc <- doc %>%
body_add_par("Introduction", style = "heading 2") %>%
body_add_par("This report presents evidence on public sector employment and compensation practices for the selected countries. The analysis uses the latest data on public sector employment trends and provides insights into the composition and trends in public sector workforces.")
# Add First Graph if selected
if ("firstGraphgender" %in% input$graphs_to_download && length(input$countries_first) > 0) {
data_to_plot <- gender_wage_premium_last %>%
filter(country_name %in% input$countries_first)
data_to_plot_long <- data_to_plot %>%
select(country_name, indicator_label, year, value) %>%
mutate(indicator_label = factor(indicator_label))
# Generate first graph (Multi-Country)
first_graph_wage_premium_gender <- ggplot(data_to_plot_long, aes(x = country_name, y = value, color = indicator_label)) +
geom_point(size = 3) +
labs(title = "Wage Premium Gender (Multi-Country)", x = "Country", y = "Value") +
theme_minimal()
# Save first graph as PNG
graph_path1 <- "C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI/first_graph_wage_premium_gender.png"
ggsave(graph_path1, plot = first_graph_wage_premium_gender, width = 6, height = 4)
# Add first graph to the Word document
doc <- doc %>%
body_add_par("First Graph: Wage Premium Gender (Multi-Country)", style = "heading 1") %>%
body_add_img(src = graph_path1, width = 6, height = 4) %>%
body_add_par("This graph shows the wage premium by gender across multiple countries.", style = "Normal")
}
# Add Second Graph if selected
if ("secondGraphgender" %in% input$graphs_to_download && !is.null(input$country_second)) {
data_to_plot <- gender_wage_premium %>%
filter(country_name == input$country_second)
data_to_plot_long <- data_to_plot %>%
select(year, indicator_name, value) %>%
mutate(indicator_name = factor(indicator_name))
second_graph_wage_premium_gende <- ggplot(data_to_plot_long, aes(x = year, y = value, color = indicator_name)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = paste("Public sector wage premium, by gender in", input$country_second, "Over Time"),
x = "Year",
y = "Employment Value"
) +
theme_minimal()
# Save second graph as PNG
graph_path2 <- "C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI/second_graph_wage_premium_gender.png"
ggsave(graph_path2, plot = second_graph_wage_premium_gender, width = 6, height = 4)
# Add second graph to the Word document
doc <- doc %>%
body_add_par("Second Graph: Public Sector Employment (Single Country)", style = "heading 1") %>%
body_add_img(src = graph_path2, width = 6, height = 4) %>%
body_add_par("This graph shows the wage premium by gender trends over time for the selected country.", style = "Normal")
}
# Save the Word document
print(doc, target = file)
}
)
#Download all graphs for report
output$downloadAllGraphsDoc <- downloadHandler(
filename = function() {
paste0("Comprehensive_Wage_Bill_Report_", Sys.Date(), ".docx")
},
content = function(file) {
# Dynamic title with the first country
report_title <- paste("Wage Bill and public employment Analysis Report")
# Create a Word document
doc <- read_docx()
# Define the style for the title with a specific color and bold
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)  # Custom color and bold text
# Apply the custom title style with color and bold
doc <- doc %>%
body_add_fpar(
fpar(ftext(report_title, prop = title_style))  # Apply custom title style with dynamic title
)
# Add the introduction heading without numbering
doc <- doc %>%
body_add_par("Introduction", style = "heading 2") %>%  # Use heading style without numbering
body_add_par("This note presents evidence on public sector employment and compensation practices in Bangladesh using the Worldwide Bureaucracy Indicators (WWBI). The primary data source is the Labor Force Survey (LFS), conducted by the Bangladesh Bureau of Statistics (BBS), which offers extensive, nationally representative data over multiple years up to 2022. The LFS’s comprehensive coverage of employment and wage issues across both public and private sectors, along with its frequency and national representativeness, makes it an ideal source for this analysis.
For international comparisons, the analysis includes a set of peer countries for benchmarking, with a particular focus on countries from the South Asia region and other aspirational peers. Information on these peers was also sourced from the WWBI.
The public sector is typically a major source of employment in most countries. The provision of basic services such as education, health, citizen security and justice, among others, makes it a central actor in labor markets, with significant impacts on the aggregate results of employment, wages, informality, and other economic variables. Moreover, public employment is an indicator of the state participation in the entire economy, which has implications for macroeconomic balances, allocation efficiency and income distribution. Thus, this analysis comprehensively documents the size of public employment, its changes over time, and the characteristics of its workforce.")
# List of key indicators in the introduction
doc <- doc %>%
body_add_par("- Wage Bill as a Percentage of GDP", style = "Normal") %>%
body_add_par("- Wage Bill as a Percentage of Public Expenditure", style = "Normal")
# Section 1: Wage Bill (as % of GDP)
doc <- doc %>%
body_add_par("Wage Bill (as % of GDP)", style = "heading 2")
graph1 <- ggplot(selected_data(), aes(x = year, y = value, color = country_name)) +
geom_line() +
labs(title = "Wage Bill as % of GDP Over Time", x = "Year", y = "Wage Bill (% of GDP)")
doc <- doc %>% body_add_gg(graph1, style = "centered")
# Section 2: Wage Bill (as % of Public Expenditure)
doc <- doc %>%
body_add_par("Wage Bill (as % of Public Expenditure)", style = "heading 2")
graph2 <- ggplot(selected_data(), aes(x = year, y = value, color = country_name)) +
geom_line() +
labs(title = "Wage Bill as % of Public Expenditure Over Time", x = "Year", y = "Wage Bill (% of Public Expenditure)")
doc <- doc %>% body_add_gg(graph2, style = "centered")
# Section 3: Wage Bill vs. GDP
doc <- doc %>%
body_add_par("Wage Bill vs. GDP per Capita", style = "heading 2")
dot_plot <- ggplot(filtered_data(), aes(x = log_gdp, y = indicator_value, color = country_name)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = "gray", linetype = "dashed") +
labs(title = "Wage Bill vs. Log(GDP per Capita)", x = "Log(GDP per Capita, 2015)", y = "Wage Bill")
doc <- doc %>% body_add_gg(dot_plot, style = "centered")
# Save the document
print(doc, target = file)
}
)
# Define the initial world map render
output$worldMap <- renderLeaflet({
leaflet(world_spdf) %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2)  # Adjust view to show the world
})
# Reactive expression to filter data based on the selected indicator and year
filtered_data_for_map <- reactive({
req(input$indicatorSelect, input$yearSelect)  # Ensure inputs are not null
data_wwbi %>%
filter(
indicator_name == input$indicatorSelect,
!is.na(.data[[paste0("year_", input$yearSelect)]])
) %>%
transmute(
country_name,
indicator_name,
value_percentage = .data[[paste0("year_", input$yearSelect)]]
)
})
# Observe and update the map
observe({
req(input$indicatorSelect, input$yearSelect)  # Ensure inputs are not null
# Filter the data based on the selected indicator and year
reported_countries <- filtered_data_for_map()
# Debugging: If no countries are reported for the selected indicator
if (is.null(reported_countries) || nrow(reported_countries) == 0) {
warning("No reported countries for the selected indicator.")
return()  # Exit if no data is available
}
# Merge the filtered data with world_spdf
world_data_merged <- world_spdf %>%
left_join(reported_countries, by = "country_name")
# Calculate the number of countries with data
total_countries_with_data <- nrow(reported_countries)
# Update the Leaflet map
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(
data = world_data_merged,
fillColor = ~ifelse(is.na(value_percentage), "#808080", colorNumeric("Greens", domain = world_data_merged$value_percentage)(value_percentage)),
fillOpacity = 0.7,
color = "white",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~paste0(
"<strong>Country:</strong> ", country_name, "<br>",
ifelse(!is.na(value_percentage),
paste0("<strong>Value:</strong> ", round(value_percentage, 2)),
"<strong>No Data</strong>")
),
popup = ~paste(
"Country: ", country_name,
"<br>Indicator: ", indicator_name,
ifelse(!is.na(value_percentage),
paste("<br>Value: ", round(value_percentage, 2)),
"<br>No Data Available")
)
)
# Render the country count
output$countryCount <- renderText({
paste("Total Countries with Data: ", total_countries_with_data)
})
})
# Dummy outputs for widgets
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 100, icon = icon("list"), color = "blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Countries", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "blue")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "blue")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "blue")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "blue")
})
}
shinyApp(ui = ui, server = server)
