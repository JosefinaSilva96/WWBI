infoBox("Last Updated on", "Sep 15, 2022", icon = icon("calendar"), color = "light-blue")
})
output$variableTable <- renderDT({
selected_columns <- c("country_name", "indicator_name", input$yearFilter)
datatable(data_wwbi[, selected_columns, drop = FALSE], options = list(pageLength = 5, autoWidth = TRUE))
})
output$linePlot <- renderPlotly({
req(input$indicator, input$countrySelect, input$yearSelect)
# Prepare the data for the plot
selected_data <- data_wwbi[data_wwbi$country_name %in% input$countrySelect, ]
# Reshape the data for plotting
selected_data_long <- selected_data %>%
pivot_longer(cols = starts_with("year_"), names_to = "year", values_to = "value") %>%
filter(year %in% input$yearSelect) %>%
mutate(year = as.integer(gsub("year_", "", year)))
# Plot the data
plot_ly(selected_data_long, x = ~year, y = ~value, color = ~country_name, type = 'scatter', mode = 'lines+markers',
line = list(width = 2), marker = list(size = 6)) %>%
layout(title = paste("Indicator Trend Over Time:", input$indicator_name),
xaxis = list(title = "Year"),
yaxis = list(title = paste(input$indicator_name)),
legend = list(title = list(text = "Country")))
})
output$worldMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2)
})
observe({
req(input$indicatorSelect, input$yearSelect)
selected_year_column <- paste0("year_", input$yearSelect)
reported_countries <- data_wwbi[!is.na(data_wwbi[[selected_year_column]]), "country_name"]
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
}
# Run the app ----
shinyApp(ui, server)
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "WWB Indicators"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Variable List", tabName = "variableList", icon = icon("table")),
menuItem("Graphs", tabName = "graphs", icon = icon("chart-simple")),
menuItem("Indicators Status", tabName = "indicators", icon = icon("chart-simple"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
box(title = "Dashboard Description", status = "primary", solidHeader = TRUE, width = 12,
"Welcome to the World Bank Indicators Dashboard!"
)
)
),
tabItem(tabName = "widgets",
fluidRow(
infoBoxOutput("numberIndicatorsBox", width = 6),
infoBoxOutput("numberCountriesBox", width = 6),
infoBoxOutput("temporalCoverageAnnualBox", width = 6),
infoBoxOutput("temporalCoverageYearsBox", width = 6),
infoBoxOutput("lastUpdatedBox", width = 6)
)
),
tabItem(tabName = "variableList",
fluidRow(
box(title = "Year Filter", status = "primary", solidHeader = TRUE, width = 3,
selectInput("yearFilter", "Select Year",
choices = paste0("year_", 2000:2022), selected = "year_2022", multiple = TRUE)
),
box(title = "Available Variables", status = "primary", solidHeader = TRUE, width = 12,
DTOutput("variableTable")
)
)
),
tabItem(tabName = "graphs",
fluidRow(
box(selectInput("indicator", "Select a WWB Indicator",
choices = c("Wage bill (as % of public expenditure) over time",
"Wage bill (% of public expenditures) and GDP per capita",
"Public sector employment",
"Public sector employment over time",
"Distribution of public sector workforce",
"Sectoral distribution of public sector workforce",
"Female employment by sector",
"Gender distribution in the public sector workforce",
"Individuals with tertiary education by sector of employment",
"Formality levels",
"Public sector wage premium (compared to all private sector workers)",
"Gender wage premium in the public sector")),
title = "Worldwide Bureaucracy Indicators", status = "primary", solidHeader = TRUE, width = 4),
box(selectizeInput("countrySelect", "Select Countries",
choices = countries, multiple = TRUE, selected = countries[1:3]),
width = 4),
box(selectInput("yearSelect", "Select Year", choices = years), width = 4)
),
fluidRow(
box(title = "Indicator Trend Over Time", status = "primary", solidHeader = TRUE, width = 12,
plotlyOutput("linePlot", height = "500px")
)
)
),
tabItem(tabName = "indicators",
fluidRow(
box(title = "Indicator Status Across Countries", status = "primary", solidHeader = TRUE, width = 12,
"This map shows which countries have reported data for the selected indicator."
),
box(title = "Select Indicator", status = "primary", solidHeader = TRUE, width = 12,
selectInput("indicatorSelect", "Choose Indicator",
choices = c("Gender", "Education Level", "Age", "Labor Status", "Wage", "Industry"))
),
box(title = "World Map", status = "primary", solidHeader = TRUE, width = 12,
leafletOutput("worldMap", height = 500)
)
)
)
)
)
)
server <- function(input, output, session) {
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Number of Indicators", "300", icon = icon("flag"), color = "light-blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Number of Countries", "200", icon = icon("earth-americas"), color = "light-blue")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage", "Annual", icon = icon("check"), color = "light-blue")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage", "2000 to 2022", icon = icon("timeline"), color = "light-blue")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated on", "Sep 15, 2022", icon = icon("calendar"), color = "light-blue")
})
output$variableTable <- renderDT({
selected_columns <- c("country_name", "indicator_name", input$yearFilter)
datatable(data_wwbi[, selected_columns, drop = FALSE], options = list(pageLength = 5, autoWidth = TRUE))
})
output$linePlot <- renderPlotly({
req(input$indicator, input$countrySelect, input$yearSelect)
# Prepare the data for the plot
selected_data <- data_wwbi[data_wwbi$country_name %in% input$countrySelect, ]
# Reshape the data for plotting
selected_data_long <- selected_data %>%
pivot_longer(cols = starts_with("year_"), names_to = "year", values_to = "value") %>%
filter(year %in% input$yearSelect) %>%
mutate(year = as.integer(gsub("year_", "", year)))
# Plot the data
plot_ly(selected_data_long, x = ~year, y = ~value, color = ~country_name, type = 'scatter', mode = 'lines+markers',
line = list(width = 2), marker = list(size = 6)) %>%
layout(title = paste("Indicator Trend Over Time:", input$indicator_name),
xaxis = list(title = "Year"),
yaxis = list(title = paste(input$indicator_name)),
legend = list(title = list(text = "Country")))
})
output$worldMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2)
})
observe({
req(input$indicatorSelect, input$yearSelect)
selected_year_column <- paste0("year_", input$yearSelect)
reported_countries <- data_wwbi[!is.na(data_wwbi[[selected_year_column]]), "country_name"]
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
}
# Run the app ----
shinyApp(ui, server)
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "WWB Indicators"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Variable List", tabName = "variableList", icon = icon("table")),
menuItem("Graphs", tabName = "graphs", icon = icon("chart-simple")),
menuItem("Indicators Status", tabName = "indicators", icon = icon("chart-simple"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
box(title = "Dashboard Description", status = "primary", solidHeader = TRUE, width = 12,
"Welcome to the World Bank Indicators Dashboard!"
)
)
),
tabItem(tabName = "widgets",
fluidRow(
infoBoxOutput("numberIndicatorsBox", width = 6),
infoBoxOutput("numberCountriesBox", width = 6),
infoBoxOutput("temporalCoverageAnnualBox", width = 6),
infoBoxOutput("temporalCoverageYearsBox", width = 6),
infoBoxOutput("lastUpdatedBox", width = 6)
)
),
tabItem(tabName = "variableList",
fluidRow(
box(title = "Year Filter", status = "primary", solidHeader = TRUE, width = 3,
selectInput("yearFilter", "Select Year",
choices = paste0("year_", 2000:2022), selected = "year_2022", multiple = TRUE)
),
box(title = "Available Variables", status = "primary", solidHeader = TRUE, width = 12,
DTOutput("variableTable")
)
)
),
tabItem(tabName = "graphs",
fluidRow(
box(selectInput("indicator", "Select a WWB Indicator",
choices = c("Wage bill (as % of public expenditure) over time",
"Wage bill (% of public expenditures) and GDP per capita",
"Public sector employment",
"Public sector employment over time",
"Distribution of public sector workforce",
"Sectoral distribution of public sector workforce",
"Female employment by sector",
"Gender distribution in the public sector workforce",
"Individuals with tertiary education by sector of employment",
"Formality levels",
"Public sector wage premium (compared to all private sector workers)",
"Gender wage premium in the public sector")),
title = "Worldwide Bureaucracy Indicators", status = "primary", solidHeader = TRUE, width = 4),
box(selectizeInput("countrySelect", "Select Countries",
choices = countries, multiple = TRUE, selected = countries[1:3]),
width = 4),
box(selectInput("yearSelect", "Select Year", choices = years), width = 4)
),
fluidRow(
box(title = "Indicator Trend Over Time", status = "primary", solidHeader = TRUE, width = 12,
plotlyOutput("linePlot", height = "500px")
)
)
),
tabItem(tabName = "indicators",
fluidRow(
box(title = "Indicator Status Across Countries", status = "primary", solidHeader = TRUE, width = 12,
"This map shows which countries have reported data for the selected indicator."
),
box(title = "Select Indicator", status = "primary", solidHeader = TRUE, width = 12,
selectInput("indicatorSelect", "Choose Indicator",
choices = c("Gender", "Education Level", "Age", "Labor Status", "Wage", "Industry"))
),
box(title = "World Map", status = "primary", solidHeader = TRUE, width = 12,
leafletOutput("worldMap", height = 500)
)
)
)
)
)
)
server <- function(input, output, session) {
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Number of Indicators", "300", icon = icon("flag"), color = "light-blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Number of Countries", "200", icon = icon("earth-americas"), color = "light-blue")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage", "Annual", icon = icon("check"), color = "light-blue")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage", "2000 to 2022", icon = icon("timeline"), color = "light-blue")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated on", "Sep 15, 2022", icon = icon("calendar"), color = "light-blue")
})
output$variableTable <- renderDT({
selected_columns <- c("country_name", "indicator_name", input$yearFilter)
datatable(data_wwbi[, selected_columns, drop = FALSE], options = list(pageLength = 5, autoWidth = TRUE))
})
output$linePlot <- renderPlotly({
req(input$indicator, input$countrySelect, input$yearSelect)
# Prepare the data for the plot
selected_data <- data_wwbi[data_wwbi$country_name %in% input$countrySelect, ]
# Reshape the data for plotting
selected_data_long <- selected_data %>%
pivot_longer(cols = starts_with("year_"), names_to = "year", values_to = "value") %>%
filter(year %in% input$yearSelect) %>%
mutate(year = as.integer(gsub("year_", "", year)))
# Plot the data
plot_ly(selected_data_long, x = ~year, y = ~value, color = ~country_name, type = 'scatter', mode = 'lines+markers',
line = list(width = 2), marker = list(size = 6)) %>%
layout(title = paste("Indicator Trend Over Time:", input$indicator_name),
xaxis = list(title = "Year"),
yaxis = list(title = paste(input$indicator_name)),
legend = list(title = list(text = "Country")))
})
output$worldMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2)
})
observe({
req(input$indicatorSelect, input$yearSelect)
selected_year_column <- paste0("year_", input$yearSelect)
reported_countries <- data_wwbi[!is.na(data_wwbi[[selected_year_column]]), "country_name"]
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
}
# Run the app ----
shinyApp(ui, server)
server <- function(input, output, session) {
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Number of Indicators", "300", icon = icon("flag"), color = "light-blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Number of Countries", "200", icon = icon("earth-americas"), color = "light-blue")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage", "Annual", icon = icon("check"), color = "light-blue")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage", "2000 to 2022", icon = icon("timeline"), color = "light-blue")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated on", "Sep 15, 2022", icon = icon("calendar"), color = "light-blue")
})
output$variableTable <- renderDT({
selected_columns <- c("country_name", "indicator_name", input$yearFilter)
datatable(data_wwbi[, selected_columns, drop = FALSE], options = list(pageLength = 5, autoWidth = TRUE))
})
output$indicatorPlot <- renderPlotly({
# Ensure the year and value columns are numeric and filter out NAs
selected_data_long <- selected_data_long %>%
filter(!is.na(value)) %>%
mutate(year = as.numeric(year), value = as.numeric(value))
# Check if the data looks correct
print(head(selected_data_long))
# Generate the plot
plot_ly(data = selected_data_long,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Indicator Trend Over Time:", input$indicator_name),
xaxis = list(title = "Year"),
yaxis = list(title = paste(input$indicator_name)),
legend = list(title = list(text = "Country")))
})
output$worldMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2)
})
observe({
req(input$indicatorSelect, input$yearSelect)
selected_year_column <- paste0("year_", input$yearSelect)
reported_countries <- data_wwbi[!is.na(data_wwbi[[selected_year_column]]), "country_name"]
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
}
# Run the app ----
shinyApp(ui, server)
server <- function(input, output, session) {
# Ensure indicator selection is handled
observe({
req(input$indicator)
# Use input$indicator to filter or select data
selected_indicator <- input$indicator
})
# Render the plot
output$indicatorPlot <- renderPlotly({
req(input$indicator, input$countrySelect, input$yearSelect)
# Subset the data based on selected indicator and countries
selected_data_long <- data_wwbi %>%
filter(indicator_name == input$indicator,
country_name %in% input$countrySelect,
year %in% 2010:2022) %>%
select(country_name, year, value)
# Check if the data looks correct
print(head(selected_data_long))  # Optional debugging step
# Generate the plot with the filtered data
plot_ly(selected_data_long,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Indicator Trend Over Time:", input$indicator),
xaxis = list(title = "Year"),
yaxis = list(title = paste(input$indicator)),
legend = list(title = list(text = "Country")))
})
output$worldMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2)
})
observe({
req(input$indicatorSelect, input$yearSelect)
selected_year_column <- paste0("year_", input$yearSelect)
reported_countries <- data_wwbi[!is.na(data_wwbi[[selected_year_column]]), "country_name"]
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
}
# Run the app ----
shinyApp(ui, server)
print(head(selected_data_long))
selected_data_long <- data_wwbi %>%
filter(indicator_name == input$indicator,
country_name %in% input$countrySelect,
year %in% 2010:2022) %>%
select(country_name, year, value)
output$indicatorPlot <- renderPlotly({
req(input$indicator, input$countrySelect, input$yearSelect)
# Subset the data based on selected indicator and countries
selected_data_long <- data_wwbi %>%
filter(indicator_name == input$indicator,
country_name %in% input$countrySelect,
year %in% 2010:2022) %>%
select(country_name, year, value)
# Check if the data looks correct
print(head(selected_data_long))
server <- function(input, output, session) {
server <- function(input, output, session) {
selected_data_long <- data_wwbi %>%
filter(indicator_name == input$indicator,
country_name %in% input$countrySelect,
year >= 2010 & year <= 2022) %>%
select(country_name, year, value)
# Debugging: Print the first few rows of filtered data
print(head(selected_data_long))  # Ensure data looks correct
# Remove any rows with NA in value or year
selected_data_long <- selected_data_long %>%
filter(!is.na(value), !is.na(year))
# Debugging: Print the cleaned data
print(head(selected_data_long))  # Ensure data looks correct after filtering out NAs
# Check if there is any data to plot
if (nrow(selected_data_long) == 0) {
return(NULL)  # Return NULL if no data to plot
}
# Generate the plot using Plotly
plot_ly(selected_data_long,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Indicator Trend Over Time:", input$indicator),
xaxis = list(title = "Year"),
yaxis = list(title = paste(input$indicator)),
legend = list(title = list(text = "Country")))
