pull(value_percentage) %>%
first() %>%
coalesce(0) %>%
round(0)
first_country_education <- filtered_data %>%
filter(country_name == first_country, indicator_label == "Education") %>%
pull(value_percentage) %>%
first() %>%
coalesce(0) %>%
round(0)
# ✅ Compare first country with others using rounded numbers
comparison_admin <- if (first_country_admin > avg_admin) {
paste0("This is higher than the average of ", avg_admin, "% across the other selected countries.")
} else {
paste0("This is lower than the average of ", avg_admin, "% across the other selected countries.")
}
comparison_education <- if (first_country_education > avg_education) {
paste0("This is higher than the average of ", avg_education, "% across the other selected countries.")
} else {
paste0("This is lower than the average of ", avg_education, "% across the other selected countries.")
}
# ✅ Ensure all numbers in interpretation_text are rounded integers
interpretation_text <- paste0(
"This graph compares the gender wage premium in the public sector across different industries. ",
"On average, the wage premium in Public Administration is ", avg_admin, "%, in Education it is ", avg_education, "%, ",
"and in Health it is ", avg_health, "%.\n\n",
"The highest wage premium in Public Administration is in ", highest_admin, ", while the lowest is in ", lowest_admin, ". ",
"In Education, the highest wage premium is observed in ", highest_education, ", whereas the lowest is in ", lowest_education, ". ",
"For Health, the highest gender wage premium is in ", highest_health, ", while the lowest is in ", lowest_health, ".\n\n",
"In ", first_country, ", the wage premium in Public Administration is ", first_country_admin, "%. ",
comparison_admin, "\n",
"In Education, the wage premium in ", first_country, " is ", first_country_education, "%. ",
comparison_education
)
# ✅ Add Image and Interpretation to the Document
doc <- doc %>%
body_add_img(src = img_path, width = 6, height = 4) %>%
body_add_par("This graph shows the gender wage premium in the public sector across different industries.", style = "Normal") %>%
body_add_par(interpretation_text, style = "Normal")
return(doc)
}
generate_intro_section <- function(doc) {
# Initialize Word document
doc <- read_docx()
# Get the first selected country
first_country <- if (!is.null(input$countries) && length(input$countries) > 0) {
input$countries[1]
} else {
"Unknown Country"
}
# Ensure first_region is defined properly
first_region <- if (!is.null(input$region) && input$region != "") {
input$region
} else {
"the selected region"
}
# Add Title to Document
title_text <- paste0(first_country, "\nWage Bill and Public Employment Analysis")
# Format title
title_style <- fp_text(color = "#722F37", font.size = 20, bold = TRUE)
subtitle_style <- fp_text(color = "black", font.size = 16, bold = TRUE)
doc <- doc %>%
body_add_fpar(fpar(ftext(first_country, prop = title_style))) %>%
body_add_fpar(fpar(ftext("Wage Bill and Public Employment Analysis", prop = subtitle_style)))
# Extract the World Bank Region for the Selected Country
first_region <- countrycode(first_country, origin = "country.name", destination = "region")
# Handle missing values in case countrycode() fails
if (is.na(first_region)) {
first_region <- "its respective region"  # Default fallback if region is not found
}
# Construct Introduction Text Dynamically
intro_text <- paste0(
"This note presents evidence on public sector employment and compensation practices in ", first_country,
" using the Worldwide Bureaucracy Indicators (WWBI). The primary data source is the Labor Force Survey , conducted by the National Statistics Office. ",
"For international comparisons, peer countries from ", first_region, " are included.",
"\n\n",  # Add line break for a new paragraph
"The public sector is typically a major source of employment in most countries. ",
"The provision of basic services such as education, health, citizen security, and justice, among others, ",
"makes it a central actor in labor markets, with significant impacts on the aggregate results of employment, ",
"wages, informality, and other economic variables. Moreover, public employment is an indicator of the state’s ",
"participation in the entire economy, which has implications for macroeconomic balances, allocation efficiency, ",
"and income distribution. Thus, this analysis comprehensively documents the size of public employment, ",
"its changes over time, and the characteristics of its workforce.",
"\n\n",
"This work documents and analyzes the size, composition, and changes in the levels of employment and wages of ",
first_country, "’s public employees compared to the private sector and how these metrics compare to regional peers."
)
# ✅ Add introduction text
doc <- doc %>% body_add_par(intro_text, style = "Normal")
# Define a bold, blue style for section headings
section_style <- fp_text(color = "#003366", font.size = 14, bold = TRUE)
# ✅ Add section title using styled text
doc <- doc %>% body_add_fpar(fpar(ftext("The Macro Fundamentals of the Public Sector", prop = section_style)))
return(doc)
}
#Pay compression
output$paycompression_plot <- renderPlotly({
req(input$countries_first)  # Ensure at least one country is selected
filtered_data_df <- pay_compression_wide %>%
filter(country_name %in% input$countries_first)
if (nrow(filtered_data_df) == 0) {
print("🚨 No data available after filtering! Check input selections.")
return(NULL)
}
if (!all(c("Public_Sector", "Private_Sector") %in% colnames(filtered_data_df))) {
print("🚨 Missing required columns after filtering!")
return(NULL)
}
filtered_data_df <- filtered_data_df %>%
mutate(color = ifelse(country_name == input$countries_first[1], "#B3242B", "#003366"))
trendline_model <- lm(Public_Sector ~ Private_Sector, data = filtered_data_df)
trendline_values <- predict(trendline_model, newdata = filtered_data_df)
plot_ly() %>%
add_trace(
data = filtered_data_df,
x = ~Private_Sector,
y = ~Public_Sector,
type = "scatter",
mode = "markers+text",
text = ~country_name,
textposition = "top center",
marker = list(size = 10, color = ~color, opacity = 0.7)
) %>%
add_trace(
x = filtered_data_df$Private_Sector,
y = trendline_values,
type = "scatter",
mode = "lines",
line = list(color = "gray", dash = "dash"),
name = "Trendline"
) %>%
layout(
title = "Pay Compression: Public vs. Private Sector (Latest Year)",
xaxis = list(title = "Private Sector Pay Compression"),
yaxis = list(title = "Public Sector Pay Compression"),
showlegend = TRUE,
plot_bgcolor = "white",
paper_bgcolor = "white"
)
})
output$note_dotplot <- renderText({
"Note: This graph compares pay compression ratios in the public and private sectors. The trendline provides a visual reference for overall patterns across countries."
})
output$downloadPayCompressionDoc <- downloadHandler(
filename = function() { paste0("Pay_Compression_Report_", Sys.Date(), ".docx") },
content = function(file) {
# **Filter data for selected countries**
filtered_data_df <- pay_compression_wide %>%
filter(country_name %in% input$countries_first)
req(nrow(filtered_data_df) > 0) # **Ensure there is data before proceeding**
# **Get the first selected country for the report title**
countries <- if (!is.null(input$countries_first) & length(input$countries_first) > 0) {
paste(input$countries_first, collapse = ", ")
} else {
"Selected Countries"
}
report_title <- paste("Pay Compression Analysis Report -", countries)
# **Create Word document**
doc <- read_docx()
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext(report_title, prop = title_style)))
# **Add Introduction**
doc <- doc %>% body_add_par("Introduction", style = "heading 2") %>%
body_add_par("This report presents an analysis of pay compression ratios in the public and private sectors across selected countries.
Pay compression is measured as the ratio of wages at the 90th percentile to the 10th percentile, providing insights into
wage inequality within each sector. The analysis compares these ratios and examines trends across different economies.",
style = "Normal")
# **Create scatter plot with trend line**
plot <- ggplot(filtered_data_df, aes(x = Private_Sector, y = Public_Sector, label = country_name)) +
geom_point(color = "#003366", size = 3) +      # Main scatter points
geom_text(vjust = -0.5, size = 3) +            # Country labels
geom_smooth(method = "lm", color = "gray", linetype = "dashed") + # Trendline
labs(title = "Pay Compression: Public vs. Private Sector",
x = "Private Sector Pay Compression",
y = "Public Sector Pay Compression") +
theme_minimal()
# **Add plot to Word document**
doc <- doc %>% body_add_gg(value = plot, style = "centered")
# **Add explanatory note**
doc <- doc %>% body_add_par("Note: This graph compares pay compression ratios in the public and private sectors.
The trendline provides a visual reference for overall patterns across countries.", style = "Normal")
# **Save document**
print(doc, target = file)
}
)
#Pay compression section
generate_pay_compression_section <- function(doc, selected_countries) {
doc <- doc %>% body_add_par("Pay Compression in the Private and Public Sector", style = "heading 1")
doc <- doc %>% body_add_par(
"This section presents an analysis of the pay compression for the private and public sector
across selected countries.",
style = "Normal"
)
if (is.null(selected_countries) || length(na.omit(selected_countries)) == 0) {
doc <- doc %>% body_add_par("No countries selected for analysis.", style = "Normal")
return(doc)
}
first_country <- selected_countries[1]
filtered_data_df <- pay_compression_wide %>%
filter(country_name %in% selected_countries)
req(nrow(filtered_data_df) > 0)
country_summary <- filtered_data_df %>%
group_by(country_name) %>%
summarise(
public_compression = round(mean(Public_Sector, na.rm = TRUE), 1),
private_compression = round(mean(Private_Sector, na.rm = TRUE), 1)
)
highest_public <- country_summary %>%
filter(public_compression == max(public_compression, na.rm = TRUE)) %>% pull(country_name)
lowest_public <- country_summary %>%
filter(public_compression == min(public_compression, na.rm = TRUE)) %>% pull(country_name)
highest_private <- country_summary %>%
filter(private_compression == max(private_compression, na.rm = TRUE)) %>% pull(country_name)
lowest_private <- country_summary %>%
filter(private_compression == min(private_compression, na.rm = TRUE)) %>% pull(country_name)
first_country_values <- country_summary %>% filter(country_name == first_country)
first_public_compression <- first_country_values %>% pull(public_compression) %>% coalesce(NA)
first_private_compression <- first_country_values %>% pull(private_compression) %>% coalesce(NA)
other_countries_avg <- country_summary %>%
filter(country_name != first_country) %>%
summarise(
avg_public_compression = round(mean(public_compression, na.rm = TRUE), 1),
avg_private_compression = round(mean(private_compression, na.rm = TRUE), 1)
)
if (first_country %in% country_summary$country_name) {
rank_public <- rank(-country_summary$public_compression, ties.method = "min")[country_summary$country_name == first_country]
rank_private <- rank(-country_summary$private_compression, ties.method = "min")[country_summary$country_name == first_country]
public_position <- dplyr::case_when(
rank_public == 1 ~ "the highest",
rank_public == nrow(country_summary) ~ "the lowest",
TRUE ~ "in the middle range"
)
private_position <- dplyr::case_when(
rank_private == 1 ~ "the highest",
rank_private == nrow(country_summary) ~ "the lowest",
TRUE ~ "in the middle range"
)
} else {
public_position <- "unranked"
private_position <- "unranked"
}
interpretation_text <- paste0(
"This figure compares pay compression ratios (90th/10th percentile) in the public and private sectors.\n\n",
"For ", first_country, ", the pay compression ratio is ", first_public_compression,
" in the public sector and ", first_private_compression, " in the private sector.\n\n",
"Among the selected countries, ", highest_public, " has the highest public sector pay compression, while ",
lowest_public, " has the lowest public sector pay compression.\n\n",
"In the private sector, ", highest_private, " has the highest pay compression, whereas ",
lowest_private, " has the lowest.\n\n",
first_country, " is ranked ", public_position, " in public sector compression and ",
private_position, " in private sector compression compared to other selected countries.\n\n",
"A higher compression ratio indicates greater income disparity within the sector. The trendline provides an overall pattern, and the 45-degree reference line represents equality between public and private sector compression."
)
plot <- ggplot(filtered_data_df, aes(x = Private_Sector, y = Public_Sector)) +
geom_point(color = "#003366", size = 3) +
geom_text(aes(label = country_name), vjust = -0.5, size = 3) +
geom_smooth(method = "lm", color = "gray", linetype = "dashed") +
labs(title = "Pay Compression: Public vs. Private Sector",
x = "Private Sector Pay Compression",
y = "Public Sector Pay Compression") +
theme_minimal()
img_path <- tempfile(fileext = ".png")
ggsave(filename = img_path, plot = plot, width = 8, height = 6, dpi = 300)
doc <- doc %>%
body_add_img(src = img_path, width = 6, height = 4) %>%
body_add_par("Note: The trendline provides a visual reference for overall patterns across countries.", style = "Normal") %>%
body_add_par(interpretation_text, style = "Normal")
return(doc)
}
generate_conclusion_section <- function(doc) {
# Add Section Title
doc <- doc %>% body_add_par("Conclusion", style = "heading 1")
# Add Conclusion Text
doc <- doc %>% body_add_par(
"This report provides a comprehensive analysis of wage bill trends, gender employment representation, and workforce participation in the public sector.
The findings highlight key trends and disparities across different sectors and countries.",
style = "Normal"
)
return(doc)
}
#Download selected graphs
output$downloadSelectedGraphsDoc <- downloadHandler(
filename = function() {
paste0("Wage_bill_and_public_employment_analysis_Selected_Report_", Sys.Date(), ".docx")
},
content = function(file) {
# Get the selected countries dynamically
selected_countries <- input$countries_first
# Initialize Word document
doc <- read_docx()
# Add Report Title
title_style <- fp_text(color = "#722F37", font.size = 20, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext("Wage_bill_and_public_employment_analysis_Selected_Report_", prop = title_style)))
doc <- generate_intro_section(doc)  # Add the Intro First
# Define Section Style
section_style <- fp_text(color = "#003366", font.size = 14, bold = TRUE)
# ✅ Dynamically include only selected sections
selected_sections <- input$selected_graphs
# ✅ Ensure selected_sections is not NULL before checking length
if (is.null(selected_sections) || length(selected_sections) == 0) {
doc <- doc %>% body_add_par("No sections selected for download.", style = "Normal")
} else {
if ("wagebill" %in% selected_sections) {
doc <- generate_wage_bill_analysis_section(doc)
}
if ("wagebill_gdp" %in% selected_sections) {
doc <- generate_gdp_analysis_section(doc, selected_countries)
}
if ("tertiaryeducation" %in% selected_sections) {
doc <- generate_tertiary_education_section(doc)
}
if ("genderwagepremium" %in% selected_sections) {
doc <- generate_wage_premium_gender_section(doc)
}
if ("wagepremiumeducation" %in% selected_sections) {
doc <- generate_wage_premium_education_section(doc)
}
if ("public_employment" %in% selected_sections) {
doc <- generate_public_sector_employment_section(doc)
}
if ("wagepremiumgender" %in% selected_sections) {
doc <- generate_wage_premium_gender_report_section(doc)
}
if ("public_workforce" %in% selected_sections) {
doc <- generate_public_sector_workforce_section(doc)
}
if ("gender_workforce" %in% selected_sections) {
doc <- generate_gender_workforce_section(doc)
}
if ("femaleoccupation" %in% selected_sections) {  # Fixed typo from "femaleocuupation"
doc <- generate_females_occupation_groups_section(doc)
}
if ("wagepremium" %in% selected_sections) {
doc <- generate_wage_premium_report_section(doc)
}
if ("gender_wage_premium" %in% selected_sections) {
doc <- generate_gender_wage_premium_section(doc)
}
if ("pay_compression" %in% selected_sections) {
doc <- generate_pay_compression_section(doc, selected_countries = selected_countries)
}
}
# ✅ Save the customized report
print(doc, target = file)
}
)
#Download one single report
output$downloadAllGraphsDoc <- downloadHandler(
filename = function() {
paste0("Wage_bill_and_public_employment_analysis_", Sys.Date(), ".docx")
},
content = function(file) {
# Get the selected countries dynamically
selected_countries <- input$countries_first
# Initialize Word document
doc <- read_docx()
# Add Report Title
title_style <- fp_text(color = "#722F37", font.size = 20, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext("Wage bill and public employment analysis", prop = title_style)))
doc <- generate_intro_section(doc)  # Add the Intro First
#Define Section Style
section_style <- fp_text(color = "#003366", font.size = 14, bold = TRUE)
# Add Sections from Each Tab
doc <- generate_wage_bill_analysis_section(doc) #  Wage Bill Analysis
doc <- generate_gdp_analysis_section(doc, selected_countries)
doc <- generate_tertiary_education_section(doc) # Tertiary Education Analysis
doc <- generate_wage_premium_gender_section(doc) #Wage Premium Gender Analysis
doc <- generate_wage_premium_education_section(doc) #Wage Premium by Education
doc <- doc %>% body_add_fpar(fpar(ftext("The size of the public sector", prop = section_style)))
doc <- generate_public_sector_employment_section(doc)  #Public Sector Employment
doc <- generate_wage_premium_gender_report_section(doc) #Wage Premium Gender Report
doc <- doc %>% body_add_fpar(fpar(ftext("Characteristics of the public sector workforce", prop = section_style)))
doc <- generate_gender_workforce_section(doc) #Gender Workforce Analysis
doc <- generate_females_occupation_groups_section(doc) #Females by Occupational Groups
doc <- doc %>%
body_add_fpar(fpar(ftext("Competitiveness of Public Sector Wages", prop = section_style))) %>%
body_add_par(
"Public sector compensation should theoretically be designed with an awareness of its influence on the broader labor market. According to the theory of “compensating wage differentials,” a job should pay more (or less) depending on its non-wage characteristics that are undesirable (or desirable). Therefore, the optimal design of public sector wages should account for the greater presence of both financial and non-financial benefits in public service. Ideally, public sector wages should include a slight penalty in base wages due to the higher non-monetary benefits such as job security, pension plans, and the opportunity to serve the public. This structure means that, despite lower monetary compensation, the total de facto compensation (including these non-monetary benefits) that individuals receive would be roughly equivalent to that in the private sector. Public sector wages should also track private sector wages, maintaining a small penalty while ensuring that wage rigidities in the public sector do not create a significant gap between the two sectors. This alignment would ensure that public sector compensation remains competitive without being distortionary, preventing shortages of skills or qualified applicants in either sector.",
style = "Normal"
)
doc <- generate_wage_premium_report_section(doc) #Public Sector Wage Premium Report
doc <- generate_gender_wage_premium_section(doc)    # Wage Premium by industry Analysis
doc <- generate_pay_compression_section(doc, selected_countries = selected_countries) #Pay Compression section
# ✅ Add Conclusion Section at the End
doc <- generate_conclusion_section(doc)
# Save the Final Report
print(doc, target = file)
}
)
output$worldMap <- renderLeaflet({
data_values <- filtered_data_for_map()
color_pal <- colorNumeric("Greens", domain = c(min(data_values$value_percentage, na.rm = TRUE),
max(data_values$value_percentage, na.rm = TRUE)))
leaflet(world_spdf) %>% addTiles() %>% setView(lng = 0, lat = 20, zoom = 2) %>%
addLegend(position = "bottomright", pal = color_pal,
values = c(min(data_values$value_percentage, na.rm = TRUE),
max(data_values$value_percentage, na.rm = TRUE)),
title = "Indicator Value", opacity = 1)
})
filtered_data_for_map <- reactive({
req(input$indicatorSelect, input$yearSelect)
data_wwbi %>% filter(indicator_name == input$indicatorSelect,
!is.na(.data[[paste0("year_", input$yearSelect)]])) %>%
transmute(country_name, indicator_name, value_percentage = .data[[paste0("year_", input$yearSelect)]])
})
observe({
req(input$indicatorSelect, input$yearSelect)
reported_countries <- filtered_data_for_map()
if(is.null(reported_countries) || nrow(reported_countries) == 0) return()
world_data_merged <- world_spdf %>% left_join(reported_countries, by = "country_name")
color_pal <- colorNumeric("Greens", domain = c(min(reported_countries$value_percentage, na.rm = TRUE),
max(reported_countries$value_percentage, na.rm = TRUE)))
leafletProxy("worldMap") %>% clearShapes() %>%
addPolygons(data = world_data_merged,
fillColor = ~ifelse(is.na(value_percentage), "#808080", color_pal(value_percentage)),
fillOpacity = 0.7,
color = "white",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~paste0("<strong>Country:</strong> ", country_name, "<br>",
ifelse(!is.na(value_percentage), paste0("<strong>Value:</strong> ", round(value_percentage, 2)), "<strong>No Data</strong>")),
popup = ~paste("Country:", country_name, "<br>Indicator:", indicator_name,
ifelse(!is.na(value_percentage), paste("<br>Value:", round(value_percentage, 2)), "<br>No Data Available"))
)
output$countryCount <- renderText({
paste("Total Countries with Data:", nrow(reported_countries))
})
})
# Change infoBox colors to "purple" to match the quartz theme
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 302, icon = icon("list"), color = "purple")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Economies", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "purple")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "purple")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "purple")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "purple")
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
### Worldwide Bureaucracy Indicators -  Main R Script
# Load libraries ----
install.packages("here")
library(here)
# Debugging: Print the working directory to check paths
print(getwd())
# Run the scripts correctly
source(here("Code", "02-shiny-dashboard.R"))
install.packages("here")
### Worldwide Bureaucracy Indicators -  Main R Script
# Load libraries ----
install.packages("here")
library(here)
# Debugging: Print the working directory to check paths
print(getwd())
# Run the scripts correctly
source(here("Code", "02-shiny-dashboard.R"))
install.packages("here")
### Worldwide Bureaucracy Indicators -  Main R Script
# Load libraries ----
install.packages("here")
library(here)
# Debugging: Print the working directory to check paths
print(getwd())
# Run the scripts correctly
source(here("Code", "02-shiny-dashboard.R"))
### Worldwide Bureaucracy Indicators -  Main R Script
# Load libraries ----
install.packages("here")
library(here)
# Debugging: Print the working directory to check paths
print(getwd())
# Run the scripts correctly
source(here("Code", "02-shiny-dashboard.R"))
# Run the app
shinyApp(ui = ui, server = server)
#Shiny App WWBI-Main do file
# Install Shiny if not installed
if (!requireNamespace("shiny", quietly = TRUE)) install.packages("shiny")
# Load the Shiny package
library(shiny)
# Run the app directly from GitHub
runGitHub("WWBI", "JosefinaSilva96", subdir = "Code")
install.packages("here")
usethis::create_from_github("JosefinaSilva96/WWBI", destdir = "~/ShinyApps")
library(rsconnect)
### Worldwide Bureaucracy Indicators -  Main R Script
# Load libraries ----
install.packages("here")
library(here)
# Debugging: Print the working directory to check paths
print(getwd())
# Run the scripts correctly
source(here("Code", "02-shiny-dashboard.R"))
# Run the app
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='josefinasilva',
token='5D94A6CF62F6F53239E6D3B3F37FAC59',
secret='32ZspNnk/r87eYOxHPb9daJ0MrGTjeTFj5F6H8lw')
rsconnect::deployApp()
setwd("C:/WBG/GitHub/WWBI/Code")
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp(appName = "wwbi-dashboard")
