xref = "paper", yref = "paper",
showarrow = FALSE,
font = list(size = 16, color = "red"),
x = 0.5, y = 0.5
),
plot_bgcolor = "white",
paper_bgcolor = "white"
))
}
# Prepare data and trendline
filtered_data_df <- filtered_data_df %>%
mutate(color = ifelse(country_name == input$countries_first[1], "#B3242B", "#003366"))
trendline_model <- lm(Public_Sector ~ Private_Sector, data = filtered_data_df)
trendline_values <- predict(trendline_model, newdata = filtered_data_df)
# Build the plot
plot_ly() %>%
add_trace(
data = filtered_data_df,
x = ~Private_Sector,
y = ~Public_Sector,
type = "scatter",
mode = "markers+text",
text = ~country_name,
textposition = "top center",
marker = list(size = 10, color = ~color, opacity = 0.7)
) %>%
add_trace(
x = filtered_data_df$Private_Sector,
y = trendline_values,
type = "scatter",
mode = "lines",
line = list(color = "gray", dash = "dash"),
name = "Trendline"
) %>%
layout(
title = "Pay Compression: Public vs. Private Sector (Latest Year)",
xaxis = list(title = "Private Sector Pay Compression"),
yaxis = list(title = "Public Sector Pay Compression"),
showlegend = TRUE,
plot_bgcolor = "white",
paper_bgcolor = "white"
)
})
output$note_dotplot <- renderText({
"Note: This graph compares pay compression ratios in the public and private sectors. The trendline provides a visual reference for overall patterns across countries."
})
output$downloadPayCompressionDoc <- downloadHandler(
filename = function() { paste0("Pay_Compression_Ratios_Report_", Sys.Date(), ".docx") },
content = function(file) {
# **Filter data for selected countries**
filtered_data_df <- pay_compression_wide %>%
filter(country_name %in% input$countries_first)
req(nrow(filtered_data_df) > 0) # **Ensure there is data before proceeding**
# **Get the first selected country for the report title**
countries <- if (!is.null(input$countries_first) & length(input$countries_first) > 0) {
paste(input$countries_first, collapse = ", ")
} else {
"Selected Countries"
}
report_title <- paste("Pay Compression Ratios Analysis Report -", countries)
# **Create Word document**
doc <- read_docx()
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext(report_title, prop = title_style)))
# **Add Introduction**
doc <- doc %>% body_add_par("Introduction", style = "heading 2") %>%
body_add_par("This report presents an analysis of pay compression ratios in the public and private sectors across selected countries.
Pay compression is measured as the ratio of wages at the 90th percentile to the 10th percentile, providing insights into
wage inequality within each sector. The analysis compares these ratios and examines trends across different economies.",
style = "Normal")
# **Create scatter plot with trend line**
plot <- ggplot(filtered_data_df, aes(x = Private_Sector, y = Public_Sector, label = country_name)) +  # or group variable
geom_point(size = 3) +
geom_text(vjust = -0.5, size = 3) +
geom_smooth(method = "lm", color = "gray", linetype = "dashed") +
labs(
title = "Pay Compression: Public vs. Private Sector",
x = "Private Sector Pay Compression",
y = "Public Sector Pay Compression"
) +
scale_color_viridis(discrete = TRUE, option = "D") +
theme_minimal()
# **Add plot to Word document**
doc <- doc %>% body_add_gg(value = plot, style = "centered")
# **Add explanatory note**
doc <- doc %>% body_add_par("Note: This graph compares pay compression ratios in the public and private sectors.
The trendline provides a visual reference for overall patterns across countries.", style = "Normal")
# **Save document**
print(doc, target = file)
}
)
#Pay compression section
generate_pay_compression_section <- function(doc, selected_countries) {
doc <- doc %>% body_add_par("Pay Compression in the Private and Public Sector", style = "heading 1")
doc <- doc %>% body_add_par(
"This section presents an analysis of the pay compression for the private and public sector
across selected countries.",
style = "Normal"
)
if (is.null(selected_countries) || length(na.omit(selected_countries)) == 0) {
doc <- doc %>% body_add_par("No countries selected for analysis.", style = "Normal")
return(doc)
}
first_country <- selected_countries[1]
filtered_data_df <- pay_compression_wide %>%
filter(country_name %in% selected_countries)
req(nrow(filtered_data_df) > 0)
country_summary <- filtered_data_df %>%
group_by(country_name) %>%
summarise(
public_compression = round(mean(Public_Sector, na.rm = TRUE), 1),
private_compression = round(mean(Private_Sector, na.rm = TRUE), 1)
)
highest_public <- country_summary %>%
filter(public_compression == max(public_compression, na.rm = TRUE)) %>% pull(country_name)
lowest_public <- country_summary %>%
filter(public_compression == min(public_compression, na.rm = TRUE)) %>% pull(country_name)
highest_private <- country_summary %>%
filter(private_compression == max(private_compression, na.rm = TRUE)) %>% pull(country_name)
lowest_private <- country_summary %>%
filter(private_compression == min(private_compression, na.rm = TRUE)) %>% pull(country_name)
first_country_values <- country_summary %>% filter(country_name == first_country)
first_public_compression <- first_country_values %>% pull(public_compression) %>% coalesce(NA)
first_private_compression <- first_country_values %>% pull(private_compression) %>% coalesce(NA)
other_countries_avg <- country_summary %>%
filter(country_name != first_country) %>%
summarise(
avg_public_compression = round(mean(public_compression, na.rm = TRUE), 1),
avg_private_compression = round(mean(private_compression, na.rm = TRUE), 1)
)
if (first_country %in% country_summary$country_name) {
rank_public <- rank(-country_summary$public_compression, ties.method = "min")[country_summary$country_name == first_country]
rank_private <- rank(-country_summary$private_compression, ties.method = "min")[country_summary$country_name == first_country]
public_position <- dplyr::case_when(
rank_public == 1 ~ "the highest",
rank_public == nrow(country_summary) ~ "the lowest",
TRUE ~ "in the middle range"
)
private_position <- dplyr::case_when(
rank_private == 1 ~ "the highest",
rank_private == nrow(country_summary) ~ "the lowest",
TRUE ~ "in the middle range"
)
} else {
public_position <- "unranked"
private_position <- "unranked"
}
interpretation_text <- paste0(
"This figure compares pay compression ratios (90th/10th percentile) in the public and private sectors.\n\n",
"For ", first_country, ", the pay compression ratio is ", first_public_compression,
" in the public sector and ", first_private_compression, " in the private sector.\n\n",
"Among the selected countries, ", highest_public, " has the highest public sector pay compression, while ",
lowest_public, " has the lowest public sector pay compression.\n\n",
"In the private sector, ", highest_private, " has the highest pay compression, whereas ",
lowest_private, " has the lowest.\n\n",
first_country, " is ranked ", public_position, " in public sector compression and ",
private_position, " in private sector compression compared to other selected countries.\n\n",
"A higher compression ratio indicates greater income disparity within the sector. The trendline provides an overall pattern, and the 45-degree reference line represents equality between public and private sector compression."
)
plot <- ggplot(filtered_data_df, aes(x = Private_Sector, y = Public_Sector, label = country_name)) +  # or group variable
geom_point(size = 3) +
geom_text(vjust = -0.5, size = 3) +
geom_smooth(method = "lm", color = "gray", linetype = "dashed") +
labs(
title = "Pay Compression: Public vs. Private Sector",
x = "Private Sector Pay Compression",
y = "Public Sector Pay Compression"
) +
scale_color_viridis(discrete = TRUE, option = "D") +
theme_minimal()
img_path <- tempfile(fileext = ".png")
ggsave(filename = img_path, plot = plot, width = 8, height = 6, dpi = 300)
doc <- doc %>%
body_add_img(src = img_path, width = 6, height = 4) %>%
body_add_par("Note: The trendline provides a visual reference for overall patterns across countries.", style = "Normal") %>%
body_add_par(paste(interpretation_text, collapse = ""), style = "Normal")
return(doc)
}
generate_pay_compression_slide <- function(ppt, selected_countries) {
if (is.null(selected_countries) || length(na.omit(selected_countries)) == 0) {
return(ppt)
}
filtered_data_df <- pay_compression_wide %>%
filter(country_name %in% selected_countries)
req(nrow(filtered_data_df) > 0)
# Create summary for plot
plot <- ggplot(filtered_data_df, aes(x = Private_Sector, y = Public_Sector, label = country_name)) +  # or group variable
geom_point(size = 3) +
geom_text(vjust = -0.5, size = 3) +
geom_smooth(method = "lm", color = "gray", linetype = "dashed") +
labs(
title = "Pay Compression: Public vs. Private Sector",
x = "Private Sector Pay Compression",
y = "Public Sector Pay Compression"
) +
scale_color_viridis(discrete = TRUE, option = "D") +
theme_minimal()
# Save plot as image
img_path <- tempfile(fileext = ".png")
ggsave(filename = img_path, plot = plot, width = 6, height = 6, dpi = 300)
# Add slide with only the image
ppt <- ppt %>%
add_slide(layout = "Title and Content", master = "Office Theme") %>%
ph_with(external_img(img_path, height = 4, width = 4),
location = ph_location_type(type = "body"))
return(ppt)
}
generate_conclusion_section <- function(doc) {
# Add Section Title
doc <- doc %>% body_add_par("Conclusion", style = "heading 1")
# Add Conclusion Text
doc <- doc %>% body_add_par(
"This report provides a comprehensive analysis of wage bill trends, gender employment representation, and workforce participation in the public sector.
The findings highlight key trends and disparities across different sectors and countries.",
style = "Normal"
)
return(doc)
}
add_section_slide <- function(ppt, title) {
ppt %>%
add_slide(layout = "Title Slide", master = "Office Theme") %>%
ph_with(
value = fpar(
ftext(title, prop = fp_text(color = "#003366", font.size = 40, bold = TRUE))
),
location = ph_location_type(type = "ctrTitle")
)
}
#Download selected graphs
output$downloadSelectedGraphsDoc <- downloadHandler(
filename = function() {
paste0("Wage_bill_and_public_employment_analysis_Selected_Report_", Sys.Date(), ".docx")
},
content = function(file) {
# Get the selected countries dynamically
selected_countries <- input$download_report_countries
# Initialize Word document
doc <- read_docx()
# Add Report Title
title_style <- fp_text(color = "#722F37", font.size = 20, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext("Wage bill and public employment analysis", prop = title_style)))
doc <- generate_intro_section(doc, selected_countries)  # Add the Intro First
# Define Section Style
section_style <- fp_text(color = "#003366", font.size = 14, bold = TRUE)
# ✅ Dynamically include only selected sections
selected_sections <- input$selected_graphs
# ✅ Ensure selected_sections is not NULL before checking length
if (is.null(selected_sections) || length(selected_sections) == 0) {
doc <- doc %>% body_add_par("No sections selected for download.", style = "Normal")
} else {
if ("wagebill" %in% selected_sections) {
doc <- generate_wage_bill_analysis_section(doc, selected_countries)
}
if ("wagebill_gdp" %in% selected_sections) {
doc <- generate_gdp_analysis_section(doc, selected_countries)
}
if ("tertiaryeducation" %in% selected_sections) {
doc <- generate_tertiary_education_section(doc, selected_countries)
}
if ("genderwagepremium" %in% selected_sections) {
doc <- generate_wage_premium_gender_section(doc, selected_countries)
}
if ("wagepremiumeducation" %in% selected_sections) {
doc <- generate_wage_premium_education_section(doc, selected_countries)
}
if ("public_employment" %in% selected_sections) {
doc <- generate_public_sector_employment_section(doc, selected_countries)
}
if ("wagepremiumgender" %in% selected_sections) {
doc <- generate_wage_premium_gender_report_section(doc, selected_countries)
}
if ("public_workforce" %in% selected_sections) {
doc <- generate_public_sector_workforce_section(doc, selected_countries)
}
if ("gender_workforce" %in% selected_sections) {
doc <- generate_gender_workforce_section(doc, selected_countries)
}
if ("female_leadership" %in% selected_sections) {  # Fixed typo from "femaleocuupation"
doc <- generate_females_occupation_groups_section(doc, selected_countries)
}
if ("wagepremium" %in% selected_sections) {
doc <- generate_wage_premium_report_section(doc, selected_countries)
}
if ("gender_wage_premium" %in% selected_sections) {
doc <- generate_gender_wage_premiumbysector_section(doc, selected_countries)
}
if ("pay_compression" %in% selected_sections) {
doc <- generate_pay_compression_section(doc, selected_countries = selected_countries)
}
}
# ✅ Save the customized report
print(doc, target = file)
}
)
#Download one single report
output$downloadAllGraphsDoc <- downloadHandler(
filename = function() {
paste0("Wage_bill_and_public_employment_analysis_", Sys.Date(), ".docx")
},
content = function(file) {
selected_countries <- input$download_report_countries # ✅ Use country selector from the download tab
# Initialize Word document
doc <- read_docx()
# Title
title_style <- fp_text(color = "#722F37", font.size = 20, bold = TRUE)
doc <- doc %>%
body_add_fpar(fpar(ftext("", prop = title_style))) %>%
generate_intro_section(selected_countries)
# Section Header Style
section_style <- fp_text(color = "#003366", font.size = 14, bold = TRUE)
# ──────────────────────────────────────
# 📘 Section 1: Macro-Fundamentals
# ──────────────────────────────────────
doc <- doc %>%
body_add_fpar(fpar(ftext("Macro-Fundamentals of the Public Sector", prop = section_style))) %>%
generate_wage_bill_analysis_section(selected_countries) %>%
generate_gdp_analysis_section(selected_countries)
# ──────────────────────────────────────
# 📘 Section 2: Size and Characteristics
# ──────────────────────────────────────
doc <- doc %>%
body_add_fpar(fpar(ftext("Size and Characteristics of the Public Sector", prop = section_style))) %>%
generate_public_sector_employment_section(selected_countries) %>%
generate_tertiary_education_section(selected_countries)
# ──────────────────────────────────────
# 📘 Section 3: Competitiveness of Public Sector Wages
# ──────────────────────────────────────
doc <- doc %>%
body_add_fpar(fpar(ftext("Competitiveness of Public Sector Wages", prop = section_style))) %>%
body_add_par(
"Public sector compensation should theoretically be designed with an awareness of its influence on the broader labor market. According to the theory of “compensating wage differentials,” a job should pay more (or less) depending on its non-wage characteristics that are undesirable (or desirable)...",
style = "Normal"
) %>%
generate_wage_premium_report_section(selected_countries) %>%
generate_wage_premium_education_section(selected_countries) %>%
generate_pay_compression_section(selected_countries = selected_countries)
# ──────────────────────────────────────
# 📘 Section 4: Equity in the Public Sector
# ──────────────────────────────────────
doc <- doc %>%
body_add_fpar(fpar(ftext("Equity in the Public Sector", prop = section_style))) %>%
generate_gender_workforce_section(selected_countries) %>%
generate_females_occupation_groups_section(selected_countries) %>%
generate_gender_wage_premiumbysector_section(selected_countries) %>%
generate_wage_premium_gender_report_section(selected_countries)
# ──────────────────────────────────────
# 📘 Conclusion
# ──────────────────────────────────────
doc <- generate_conclusion_section(doc)
# Save final report
print(doc, target = file)
}
)
#Power Point Slides
output$downloadSelectedGraphsPPT <- downloadHandler(
filename = function() {
paste0("Wage_bill_and_public_employment_analysis_Selected_Presentation_", Sys.Date(), ".pptx")
},
content = function(file) {
selected_countries <- input$download_report_countries
selected_sections <- input$selected_graphs
# Initialize PowerPoint
ppt <- read_pptx()
# Add a title slide
ppt <- ppt %>%
add_slide(layout = "Title Slide", master = "Office Theme") %>%
ph_with("Wage bill and public employment analysis", location = ph_location_type(type = "ctrTitle")) %>%
ph_with(paste("Generated on", Sys.Date()), location = ph_location_type(type = "subTitle"))
# Only include selected graphs
if (!is.null(selected_sections) && length(selected_sections) > 0) {
if ("wagebill" %in% selected_sections || "wagebill_gdp" %in% selected_sections) {
ppt <- add_section_slide(ppt, "Macro-Fundamentals of the Public Sector")
}
if ("wagebill" %in% selected_sections) {
ppt <- generate_wage_bill_analysis_slide(ppt, selected_countries)
}
if ("wagebill_gdp" %in% selected_sections) {
ppt <- generate_gdp_analysis_slide(ppt, selected_countries)
}
if ("public_employment" %in% selected_sections || "public_workforce" %in% selected_sections || "tertiaryeducation" %in% selected_sections) {
ppt <- add_section_slide(ppt, "Size and Characteristics of the Public Sector")
}
if ("public_employment" %in% selected_sections) {
ppt <- generate_public_sector_employment_slide(ppt, selected_countries)
}
if ("public_workforce" %in% selected_sections) {
ppt <- generate_public_sector_workforce_slide(ppt, selected_countries)
}
if ("tertiaryeducation" %in% selected_sections) {
ppt <- generate_tertiary_education_slide(ppt, selected_countries)
}
if ("genderwagepremium" %in% selected_sections || "wagepremiumeducation" %in% selected_sections || "pay_compression" %in% selected_sections) {
ppt <- add_section_slide(ppt, "Competiiveness of public sector wages")
}
if ("genderwagepremium" %in% selected_sections) {
ppt <- generate_wage_premium_gender_slide(ppt, selected_countries)
}
if ("wagepremiumeducation" %in% selected_sections) {
ppt <-generate_wage_premium_education_slide(ppt, selected_countries)
}
if ("pay_compression" %in% selected_sections) {
ppt <- generate_pay_compression_slide(ppt, selected_countries)
}
if ("wagepremiumgender" %in% selected_sections || "gender_workforce" %in% selected_sections || "gender_wage_premium" %in% selected_sections
|| "female_leadership" %in% selected_sections) {
ppt <- add_section_slide(ppt, "Equity in public sector")
}
if ("wagepremiumgender" %in% selected_sections) {
ppt <- generate_wage_premium_gender_report_slide(ppt, selected_countries)
}
if ("gender_workforce" %in% selected_sections) {
ppt <- generate_gender_workforce_slide(ppt, selected_countries)
}
if ("gender_wage_premium" %in% selected_sections) {
ppt <- generate_gender_wage_premiumbysector_slide(ppt, selected_countries)
}
if ("female_leadership" %in% selected_sections) {
ppt <- generate_females_occupation_groups_slide(ppt, selected_countries)
}
# add more slide generators here as needed
} else {
# If no selection: optionally include a placeholder slide
ppt <- ppt %>%
add_slide(layout = "Title and Content", master = "Office Theme") %>%
ph_with_text(type = "title", str = "No graphs selected") %>%
ph_with_text(type = "body", str = "Please select at least one graph to download.")
}
# Save the PowerPoint
print(ppt, target = file)
}
)
# ---------------------
# Clean base map with legend
output$worldMap <- renderLeaflet({
leaflet(world_spdf) %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2) %>%
addLegend(
position = "bottomright",
colors = c("gray", "#6DA96F"),
labels = c("No Data", "Reported"),
title = "Indicator Availability",
opacity = 1
)
})
# Create reactive that flags countries that have ANY data for the selected indicator
filtered_data_for_map <- reactive({
req(input$indicatorSelect)
data_wwbi %>%
filter(indicator_name == input$indicatorSelect) %>%
mutate(
any_data = apply(select(., starts_with("year_")), 1, function(x) any(!is.na(x)))
) %>%
filter(any_data) %>%
transmute(country_name, indicator_name, has_data = 1)  # use 'has_data' instead of value_percentage
})
# Update the map
observe({
req(input$indicatorSelect)
reported_countries <- filtered_data_for_map()
if (nrow(reported_countries) == 0) return()
# Match the country names to the shapefile column
world_data_merged <- world_spdf %>%
left_join(reported_countries, by = c("name_long" = "country_name"))
# Use a factor color palette based on 0 (missing) and 1 (has data)
color_pal <- colorFactor(palette = c("gray", "#6DA96F"), domain = c(0, 1))
leafletProxy("worldMap") %>% clearShapes() %>%
addPolygons(
data = world_data_merged,
fillColor = ~color_pal(ifelse(is.na(has_data), 0, has_data)),
fillOpacity = 0.7,
color = "white",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~paste0("Country: ", name_long, "-",
ifelse(!is.na(has_data), "Reported", "No Data")),
popup = ~paste(
"Country:", name_long, "-",
"Indicator:", ifelse(!is.na(indicator_name), indicator_name, "None"), "-",
ifelse(!is.na(has_data), "Reported", "No Data Available")
)
)
output$countryCount <- renderText({
paste("Total Countries with Data:", nrow(reported_countries))
})
})
# Change info Box colors to "purple" to match the quartz theme
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 302, icon = icon("list"), color = "purple")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Economies", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "purple")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "purple")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "purple")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2025", icon = icon("clock"), color = "purple")
})
}
shinyApp(ui = ui, server = server)
# the end ##############################################
#Shiny App WWBI-Main do file
# Install Shiny if not installed
if (!requireNamespace("shiny", quietly = TRUE)) install.packages("shiny")
# Load the Shiny package
library(shiny)
# Run the app directly from GitHub
runGitHub("WWBI", "JosefinaSilva96", subdir = "Code")
