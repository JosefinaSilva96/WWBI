pivot_longer(cols = starts_with("year_"),
names_to = "year",
values_to = "value") %>%
mutate(year = as.numeric(gsub("year_", "", year))) %>%  # Clean the 'year' column
filter(!is.na(value))  # Remove rows with NA values
View(selected_data_long)
# Filter the data using dplyr
selected_data_long <- data_wwbi %>%
filter(indicator_name == indicator & country_name %in% countries) %>%
select(country_name, indicator_name, starts_with("year_"))  # Select relevant columns
indicator <- unique(data_wwbi$indicator_name)
# Filter the data using dplyr
selected_data_long <- data_wwbi %>%
filter(indicator_name == indicator & country_name %in% countries) %>%
select(country_name, indicator_name, starts_with("year_"))  # Select relevant columns
# Reshape the data using pivot_longer
selected_data_long <- selected_data_long %>%
pivot_longer(cols = starts_with("year_"),
names_to = "year",
values_to = "value") %>%
mutate(year = as.numeric(gsub("year_", "", year))) %>%  # Clean the 'year' column
filter(!is.na(value))  # Remove rows with NA values
plot <- plot_ly(selected_data_long,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Indicator Trend Over Time:", input$indicator),
xaxis = list(title = "Year", dtick = 5), # 5-year skips
yaxis = list(title = input$indicator),
legend = list(title = list(text = "Country")))
# Filter the data for the specific indicator "Wage bill as a percentage of Public Expenditure"
filtered_data <- selected_data_long[selected_data_long$indicator_name == "Wage bill as a percentage of Public Expenditure", ]
# Create the plot
plot <- plot_ly(filtered_data,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = "Wage Bill as a Percentage of Public Expenditure: Trend Over Time",
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
print(plot)
View(filtered_data)
View(filtered_data)
filtered_data <- wwbi[wwbi$indicator_name == "Wage bill as a percentage of Public Expenditure", ]
filtered_data <- data_wwbi[data_wwbi$indicator_name == "Wage bill as a percentage of Public Expenditure", ]
View(filtered_data)
# Create the plot
plot <- plot_ly(filtered_data,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = "Wage Bill as a Percentage of Public Expenditure: Trend Over Time",
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
print(plot)
filtered_data <- filtered_data %>%
pivot_longer(cols = starts_with("year_"),
names_to = "year",
values_to = "value") %>%
mutate(year = as.numeric(gsub("year_", "", year))) %>%  # Clean the 'year' column
filter(!is.na(value))
View(selected_data_long)
View(filtered_data)
# Create the plot
plot <- plot_ly(filtered_data,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = "Wage Bill as a Percentage of Public Expenditure: Trend Over Time",
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
print(plot)
# Define UI
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "WWB Indicators"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Variable List", tabName = "variableList", icon = icon("table")),
menuItem("Graphs", tabName = "graphs", icon = icon("chart-line")),
menuItem("Indicators Status", tabName = "indicators", icon = icon("globe"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
box(title = "Dashboard Description", status = "primary", solidHeader = TRUE, width = 12,
"Welcome to the World Bank Indicators Dashboard!")
)
),
tabItem(tabName = "widgets",
fluidRow(
infoBoxOutput("numberIndicatorsBox", width = 6),
infoBoxOutput("numberCountriesBox", width = 6),
infoBoxOutput("temporalCoverageAnnualBox", width = 6),
infoBoxOutput("temporalCoverageYearsBox", width = 6),
infoBoxOutput("lastUpdatedBox", width = 6)
)
),
tabItem(tabName = "variableList",
fluidRow(
box(title = "Year Filter", status = "primary", solidHeader = TRUE, width = 3,
selectInput("yearFilter", "Select Year",
choices = paste0("year_", 2000:2022), selected = "year_2022", multiple = TRUE)
),
box(title = "Available Variables", status = "primary", solidHeader = TRUE, width = 12,
DTOutput("variableTable")
)
)
),
tabItem(tabName = "graphs",
fluidRow(
box(selectInput("indicator", "Select a WWB Indicator",
choices = c("Wage bill (as % of public expenditure) over time")), # Select indicator
title = "Worldwide Bureaucracy Indicators", status = "primary", solidHeader = TRUE, width = 4),
box(selectInput("countryFilter", "Select Country",
choices = unique(filtered_data$country_name), selected = NULL, multiple = TRUE),
width = 4),
mainPanel(
plotlyOutput('plot')  # Render plotly output
)
)
),
tabItem(tabName = "indicators",
fluidRow(
box(title = "Indicator Status Across Countries", status = "primary", solidHeader = TRUE, width = 12,
"This map shows which countries have reported data for the selected indicator."
),
box(title = "Select Indicator", status = "primary", solidHeader = TRUE, width = 12,
selectInput("indicatorSelect", "Choose Indicator",
choices = c("Gender", "Education Level", "Age", "Labor Status", "Wage", "Industry"))
),
box(title = "World Map", status = "primary", solidHeader = TRUE, width = 12,
leafletOutput("worldMap", height = 500)
)
)
)
)
)
)
# Server ----
server <- function(input, output, session) {
# Filter data based on indicator and selected countries
filtered_data <- reactive({
selected_data_long %>%
filter(indicator_name == "Wage bill as a percentage of Public Expenditure",
country_name %in% input$countryFilter)
})
# Render the plotly plot
output$plot <- renderPlotly({
req(filtered_data())
plot_ly(filtered_data(),
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = "Wage Bill as a Percentage of Public Expenditure: Trend Over Time",
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
})
# Update world map based on selected indicator
observe({
req(input$indicatorSelect)
# Filter countries with reported data for the selected indicator
reported_countries <- data_wwbi %>%
filter(!is.na(.data[[paste0("year_", 2022)]])) %>%
pull(country_name)
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
# Render Data Table of variables
output$variableTable <- renderDT({
data_wwbi %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])"))
})
# Dummy outputs for widgets to prevent errors (define actual values in your code)
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 100, icon = icon("list"), color = "blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Countries", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "blue")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "blue")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "blue")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "blue")
})
}
# Run the app
shinyApp(ui, server)
ui <- fluidPage(
headerPanel('Example'),
sidebarPanel(
selectInput('xcol','Country', names(filtered_data)),
selected = names(filtered_data)[[2]]),
mainPanel(
plotlyOutput('plot')
)
)
server <- function(input, output) {
x <- reactive({
filtered_data[,input$xcol]
})
output$plot <- renderPlotly(
plot <- plot_ly(filtered_data,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = "Wage Bill as a Percentage of Public Expenditure: Trend Over Time",
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
)
}
shinyApp(ui,server)
ui <- fluidPage(
headerPanel('Example'),
sidebarPanel(
selectInput('xcol','Country', names(filtered_data)),
selected = names(filtered_data)[[2]]),
mainPanel(
plotlyOutput('plot')
)
)
server <- function(input, output) {
x <- reactive({
filtered_data[,input$xcol]
})
output$plot <- renderPlotly(
plot <- plot_ly(filtered_data,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = "Wage Bill as a Percentage of Public Expenditure: Trend Over Time",
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
)
}
shinyApp(ui,server)
ui <- fluidPage(
headerPanel('Example'),
sidebarPanel(
selectInput('country', 'Country',
choices = unique(filtered_data$country_name),
selected = unique(filtered_data$country_name)[1]), # Default to first country
),
mainPanel(
plotlyOutput('plot')
)
)
server <- function(input, output) {
# Reactive expression to filter data based on selected country
filtered_country_data <- reactive({
filtered_data[filtered_data$country_name == input$country, ]
})
# Render Plotly plot based on selected country
output$plot <- renderPlotly({
data_to_plot <- filtered_country_data()  # Get filtered data based on selected country
plot_ly(data_to_plot,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Wage Bill as a Percentage of Public Expenditure for", input$country, "Over Time"),
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
})
}
shinyApp(ui, server)
ui <- fluidPage(
headerPanel('Example'),
sidebarPanel(
selectInput('countries', 'Countries',
choices = unique(filtered_data$country_name),
selected = unique(filtered_data$country_name)[1],  # Default to the first country
multiple = TRUE)  # Allow multiple countries to be selected
),
mainPanel(
plotlyOutput('plot')
)
)
server <- function(input, output) {
# Reactive expression to filter data based on selected countries
filtered_countries_data <- reactive({
filtered_data[filtered_data$country_name %in% input$countries, ]
})
# Render Plotly plot based on selected countries
output$plot <- renderPlotly({
data_to_plot <- filtered_countries_data()  # Get filtered data based on selected countries
plot_ly(data_to_plot,
x = ~year,
y = ~value,
color = ~country_name,  # Different colors for each country
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Wage Bill as a Percentage of Public Expenditure for Selected Countries Over Time"),
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
})
}
shinyApp(ui, server)
ui <- fluidPage(
headerPanel('Example'),
sidebarPanel(
selectInput('countries', 'Countries',
choices = unique(filtered_data$country_name),
selected = unique(filtered_data$country_name)[1],  # Default to the first country
multiple = TRUE)  # Allow multiple countries to be selected
),
mainPanel(
plotlyOutput('plot')
)
)
server <- function(input, output) {
# Reactive expression to filter data based on selected countries
filtered_countries_data <- reactive({
filtered_data[filtered_data$country_name %in% input$countries, ]
})
# Render Plotly plot based on selected countries
output$plot <- renderPlotly({
data_to_plot <- filtered_countries_data()  # Get filtered data based on selected countries
# Extract the most recent year and its value for each country
last_year_data <- data_to_plot %>%
group_by(country_name) %>%
filter(year == max(year)) %>%
ungroup() %>%
select(country_name, year, value)
# Create the plot
plot <- plot_ly(data_to_plot,
x = ~year,
y = ~value,
color = ~country_name,  # Different colors for each country
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Wage Bill as a Percentage of Public Expenditure for Selected Countries Over Time"),
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
# Add annotations for the last year values for each country
for(i in 1:nrow(last_year_data)) {
plot <- plot %>%
add_annotations(
x = last_year_data$year[i],
y = last_year_data$value[i],
text = paste(last_year_data$country_name[i], ":", round(last_year_data$value[i], 2)),
showarrow = TRUE,
arrowhead = 2,
ax = 20,
ay = -40,
font = list(size = 10, color = "black"),
bgcolor = "white"
)
}
plot
})
}
shinyApp(ui, server)
library(haven)  # for reading .dta files
library(dplyr)  # for data manipulation
library(tidyr)  # for reshaping data
library(stringr) # work with strings
library(labelled) # use labels
library(gtsummary) # tables
library(gt) # tables
library(ggplot2) #graphs
library(tidyverse) # working with tidy data
library(modelsummary) # creating summary tables
library(stargazer) # writing nice tables
library(RColorBrewer) # color palettes
data_path <- "C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI"
library(haven)
library(dplyr)
library(tidyr)
library(stringr)
library(labelled)
library(readxl)
library(data.table)
library(lubridate)
library(haven)
library(dplyr)
library(tidyr)
library(stringr)
library(labelled)
library(data.table)
library(ggplot2)
library(shinydashboard)
library(shiny)
library(shinythemes)
library(DT)
library(maps)
library(mapdata)
library(leaflet)
library(DT)
library(rnaturalearth)
library(sf)
library(plotly)
ui <- fluidPage(
headerPanel('Example'),
sidebarPanel(
selectInput('countries', 'Countries',
choices = unique(filtered_data$country_name),
selected = unique(filtered_data$country_name)[1],  # Default to the first country
multiple = TRUE)  # Allow multiple countries to be selected
),
mainPanel(
plotlyOutput('plot')
)
)
server <- function(input, output) {
# Reactive expression to filter data based on selected countries
filtered_countries_data <- reactive({
filtered_data[filtered_data$country_name %in% input$countries, ]
})
# Render Plotly plot based on selected countries
output$plot <- renderPlotly({
data_to_plot <- filtered_countries_data()  # Get filtered data based on selected countries
# Extract the most recent year and its value for each country
last_year_data <- data_to_plot %>%
group_by(country_name) %>%
filter(year == max(year)) %>%
ungroup() %>%
select(country_name, year, value)
# Create the plot
plot <- plot_ly(data_to_plot,
x = ~year,
y = ~value,
color = ~country_name,  # Different colors for each country
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Wage Bill as a Percentage of Public Expenditure for Selected Countries Over Time"),
xaxis = list(title = "Year", dtick = 5),  # 5-year intervals
yaxis = list(title = "Wage Bill (%)"),
legend = list(title = list(text = "Country")))
# Add annotations for the last year values for each country without arrows
for(i in 1:nrow(last_year_data)) {
plot <- plot %>%
add_annotations(
x = last_year_data$year[i],
y = last_year_data$value[i],
text = paste(round(last_year_data$value[i], 2)),
showarrow = FALSE,  # Remove the arrow
font = list(size = 12, color = "black"),
bgcolor = "white",
xanchor = "center",
yanchor = "bottom"
)
}
plot
})
}
shinyApp(ui, server)
library(shiny); runApp('Code/02-shiny-dashboard.R')
