slice_max(order_by = year, n = 1) %>%  # Get the latest year available for each country
ungroup()
})
# Render the stacked bar graph
output$stackedBarGraph <- renderPlotly({
data_to_plot <- filtered_workforce_data()
req(nrow(data_to_plot) > 0)  # Ensure there's data to plot
plot_ly(
data = data_to_plot,
x = ~country_name,
y = ~value_percentage,
color = ~indicator_name,
type = "bar",
text = ~paste(
"Country:", country_name,
"<br>Indicator:", indicator_name,
"<br>Value:", round(value_percentage, 1), "%"
),  # Detailed hover information
textposition = "auto",
colors = c(
"Public Administration workers, as a share of public total employees" = "#568340",
"Education workers, as a share of public total employees" = "#B3242B",
"Health workers, as a share of public total employees" = "#003366",
"Other" = "#A9A9A9"  # Gray for "Other"
)
) %>%
layout(
barmode = "stack",
title = "Public Workforce Distribution by Country",
xaxis = list(title = "Country"),
yaxis = list(title = "Workforce Distribution (%)", range = c(0, 100)),
legend = list(title = list(text = "<b>Indicator</b>"))
)
})
# Second Graph: Horizontal Stacked Bar Chart (Single Country)
output$messageOutput <- renderUI({
# Filter data for the selected country
filtered_data <- public_sector_workforce %>%
filter(country_name == input$selected_country)
# Check if there is enough data
if (nrow(filtered_data) < 2) {
message <- "Not enough data available for this country to create the graph."
return(tags$p(message, style = "color: red; font-weight: bold;"))
}
return(NULL)
})
output$horizontalStackedBar <- renderPlotly({
req(input$selected_country)
# Filter data for the selected country
filtered_data <- public_sector_workforce %>%
filter(country_name == input$selected_country)
# Find the first and last year available for the selected country
first_year <- min(filtered_data$year, na.rm = TRUE)
last_year <- max(filtered_data$year, na.rm = TRUE)
# Filter data for the first and last year
data_to_plot <- filtered_data %>%
filter(year %in% c(first_year, last_year)) %>%
group_by(year, indicator_name) %>%
summarise(value_percentage = mean(value_percentage, na.rm = TRUE), .groups = "drop")
# Create the horizontal stacked bar chart
plot_ly(data = data_to_plot,
x = ~value_percentage,  # Horizontal bar
y = ~factor(year, levels = c(last_year, first_year)),  # Ensure correct order
color = ~indicator_name,
type = "bar",
orientation = "h",  # Horizontal orientation
text = ~paste0(round(value_percentage, 1), "%"),  # Add percentage as text
textposition = "inside",
colors = c(
"Public Administration workers, as a share of public total employees" = "#568340",
"Education workers, as a share of public total employees" = "#B3242B",
"Health workers, as a share of public total employees" = "#003366",
"Other" = "#A9A9A9"
)
) %>%
layout(
barmode = "stack",
title = paste("Sectoral Distribution of Public Sector Workforce in", input$selected_country,
"(", first_year, "&", last_year, ")"),
xaxis = list(title = "Percentage (%)"),
yaxis = list(title = "Year"),
legend = list(title = list(text = "Sector"))
)
})
# Word Graph Download Handler
output$downloadGraphsWord <- downloadHandler(
filename = function() {
paste0("Public_Sector_Workforce_Graphs_", Sys.Date(), ".docx")
},
content = function(file) {
# Create a new Word document
doc <- read_docx()
# Check if the first graph is selected
if ("firstGraph" %in% input$selected_graphs_public) {
# Render the first graph
data_to_plot <- filtered_workforce_data()
if (nrow(data_to_plot) > 0) {
stacked_graph <- plot_ly(
data = data_to_plot,
x = ~country_name,
y = ~value_percentage,
color = ~indicator_name,
type = "bar",
text = ~paste(
"Country:", country_name,
"<br>Indicator:", indicator_name,
"<br>Value:", round(value_percentage, 1), "%"
),
textposition = "auto",
colors = c(
"Public Administration workers, as a share of public total employees" = "#568340",
"Education workers, as a share of public total employees" = "#B3242B",
"Health workers, as a share of public total employees" = "#003366",
"Other" = "#A9A9A9"
)
)
# Save the first graph as an image
tmp_file1 <- tempfile(fileext = ".png")
export(stacked_graph, file = tmp_file1)
# Add the first graph to the document
doc <- doc %>%
body_add_par("First Graph: Public Workforce Distribution by Country", style = "heading 1") %>%
body_add_img(src = tmp_file1, width = 6, height = 4)
}
}
# Check if the second graph is selected
if ("secondGraph" %in% input$selected_graphs_public) {
filtered_data <- public_sector_workforce %>%
filter(country_name == input$selected_country)
if (nrow(filtered_data) > 0) {
first_year <- min(filtered_data$year, na.rm = TRUE)
last_year <- max(filtered_data$year, na.rm = TRUE)
if (is.finite(first_year) && is.finite(last_year)) {
data_to_plot <- filtered_data %>%
filter(year %in% c(first_year, last_year)) %>%
group_by(year, indicator_name) %>%
summarise(value_percentage = mean(value_percentage, na.rm = TRUE), .groups = "drop")
horizontal_graph <- plot_ly(
data = data_to_plot,
x = ~value_percentage,
y = ~factor(year, levels = c(last_year, first_year)),
color = ~indicator_name,
type = "bar",
orientation = "h",
text = ~paste0(round(value_percentage, 1), "%"),
textposition = "inside",
colors = c(
"Public Administration workers, as a share of public total employees" = "#568340",
"Education workers, as a share of public total employees" = "#B3242B",
"Health workers, as a share of public total employees" = "#003366",
"Other" = "#A9A9A9"
)
)
# Save the second graph as an image
tmp_file2 <- tempfile(fileext = ".png")
export(horizontal_graph, file = tmp_file2)
# Add the second graph to the document
doc <- doc %>%
body_add_par(paste("Horizontal Stacked Bar Graph for", input$selected_country), style = "heading 1") %>%
body_add_img(src = tmp_file2, width = 6, height = 4)
}
}
}
# Save the Word document
print(doc, target = file)
}
)
#Gender Workforce
output$employment_plot <- renderPlotly({
# Filter data based on selected countries
filtered_data <- gender_workforce %>%
filter(country_name %in% input$countries_workforce)
#Last year available
public_latest <- filtered_data %>%
filter(indicator_name == "Females, as a share of public paid employees") %>%
group_by(country_name) %>%
filter(year == max(year, na.rm = TRUE)) %>%  # Keep only the most recent year
ungroup()
#Last year available
private_latest <- filtered_data %>%
filter(indicator_name == "Females, as a share of private paid employees") %>%
group_by(country_name) %>%
filter(year == max(year, na.rm = TRUE)) %>%  # Keep only the most recent year
ungroup()
# Create the plot
plot <- plot_ly(
data = public_latest,
x = ~country_name,
y = ~value_percentage,  # Use the percentage for the last year available
type = 'bar',
color = I("#003366"),  # Color for public sector
text = ~paste("Country: ", country_name,
"<br>Last year available: ", year,
"<br>Employment (%): ", round(value_percentage, 2)),  # Add detailed hover text
hoverinfo = "text",  # Show hover info
name = "Public Sector",
showlegend = TRUE
) %>%
add_trace(
data = private_latest,
x = ~country_name,
y = ~value_percentage,  # Use the percentage for the last year available
type = "scatter",
mode = "markers",
marker = list(size = 10, color = "#B3242B"),
name = "Private Sector",
text = ~paste("Country: ", country_name,
"<br>Last year available: ", year,
"<br>Employment (%): ", round(value_percentage, 2)),  # Add detailed hover text
hoverinfo = "text",  # Show hover info
showlegend = TRUE  # Show the legend
) %>%
layout(
barmode = "group",
title = "Female Employment by Sector (Last Year Available)",
xaxis = list(
title = "Country (Last Year Available)",
tickmode = 'array',
tickvals = public_latest$country_name,  # Explicitly set the tick values
ticktext = paste(public_latest$country_name,
"(", public_latest$year, ")")  # Append year to country names
),
yaxis = list(title = "Employment (%)"),
legend = list(title = list(text = "Sector"))
)
return(plot)
})
# Second Graph: Female Employment by Sector Over Time (Single Country)
output$employment_plot_overtime <- renderPlotly({
# Filter the data for the selected country
filtered_data <- gender_workforce %>%
filter(country_name == input$selected_country) # Ensure single country selection
# Define a custom color palette
custom_colors <- c("Females, as a share of private paid employees" = "#003366", "Females, as a share of public paid employees" = "#B3242B")
# Create the Plotly graph
plot <- filtered_data %>%
plot_ly(
x = ~year,
y = ~value_percentage,
color = ~indicator_name,
colors = custom_colors, # Apply custom colors
type = 'scatter',
mode = 'lines+markers',
hoverinfo = 'text',
text = ~paste(
"Country:", country_name,
"<br>Sector:", indicator_name,
"<br>Year:", year,
"<br>Female Employment:", value_percentage
)
) %>%
layout(
title = paste("Female Employment by Sector Over Time in", input$selected_country),
xaxis = list(title = "Year"),
yaxis = list(title = "Female Employment (%)"),
legend = list(title = list(text = "<b>Sector</b>")),
hovermode = "closest"
)
plot
})
#Tertiary Education
# Render the Plotly bar graph
output$barPlot <- renderPlotly({
# Check if countries are selected
if (is.null(input$selected_countries) || length(input$selected_countries) == 0) {
return(NULL)  # Do nothing if no countries are selected
}
# Filter data based on selected countries
filtered_data <- tertiary_education %>%
filter(country_name %in% input$selected_countries)
# Ensure the filtered dataset is not empty
if (nrow(filtered_data) == 0) {
return(NULL)  # Return nothing if the filtered dataset is empty
}
# Create the Plotly bar chart
plot_ly(
data = filtered_data,
x = ~country_name,                      # X-axis: Country name
y = ~value_percentage,                  # Y-axis: Tertiary education percentages
color = ~indicator_name,                # Different color for Public/Private
colors = c(
"Individuals with tertiary education as a share of public paid employees" = "#003366",
"Individuals with tertiary education as a share of private paid employees" = "#B3242B"
),                                     # Custom color mapping
type = 'bar',                           # Bar chart
barmode = 'group'                       # Group bars for Public/Private
) %>%
layout(
title = "Tertiary Education by Sector and Country",
xaxis = list(title = "Country"),      # Title for x-axis
yaxis = list(title = "Tertiary Education (%)"), # Title for y-axis
bargap = 0.2                          # Adjust gap between bars
)
})
#Public sector wage Premium
# Render the Plotly dot plot
output$dotPlot <- renderPlotly({
# Ensure countries are selected
req(input$countries_first)
# Filter data based on selected countries
filtered_data <- public_wage_premium[public_wage_premium$country_name %in% input$countries_first, ]
# Ensure there's data to plot
if (nrow(filtered_data) == 0) {
return(NULL)  # Return nothing if no data is available
}
# Create a new column to assign color based on the first selected country
filtered_data$color <- ifelse(filtered_data$country_name == input$countries_first[1], "red", "blue")
# Create the Plotly dot plot
plot_ly(
data = filtered_data,
x = ~country_name,                          # X-axis: Country name
y = ~value_percentage,                      # Y-axis: Wage premium percentage
color = ~color,                             # Color by the new color column
colors = c("#003366", "#B3242B"),           # Custom color mapping
type = 'scatter',                           # Scatter plot (for dot plot)
mode = 'markers',                           # Markers to create dots
marker = list(size = 12)                    # Set dot size
) %>%
layout(
title = "Public Sector Wage Premium (Compared to All Private Employees) by Country",
xaxis = list(title = "Country"),
yaxis = list(title = "Public Sector Wage Premium (%)"),
showlegend = FALSE                          # Optional: Hide legend
)
})
#Public sector wage premium by education level
# Render the Plotly bar graph
output$barPloteduc <- renderPlotly({
# Filter data based on selected country
filtered_data <- public_wage_premium_educ[public_wage_premium_educ$country_name == input$selected_country, ]
plot_ly(
data = filtered_data,
x = ~indicator_name,                         # X-axis: Education levels
y = ~value_percentage,                      # Y-axis: Public sector wage premium
color = ~indicator_name,                    # Color bars by indicator_name (Education level)
colors = c("No Education" = "#003366",
"Primary Education" = "#B3242B",
"Secondary Education" = "#333333",
"Tertiary Education" = "#006400"),  # Custom color mapping
type = 'bar'                                # Bar chart type
) %>%
layout(
title = "Public Sector Wage Premium by Education Level (Compared to Private Formal Workers)",
xaxis = list(
title = "Education Level",              # X-axis title
tickangle = 0                           # Horizontal labels
),
yaxis = list(
title = "Wage Premium (%)"              # Y-axis title
),
barmode = 'group',                        # Group bars by education level
bargap = 0.2,                             # Adjust gap between bars
showlegend = TRUE,                        # Show legend to distinguish between education levels
legend = list(
title = list(text = "Education Level")  # Title for the legend
)
)
})
output$downloadAllGraphsWord <- downloadHandler(
filename = function() {
paste0("Selected_Graphs_", Sys.Date(), ".docx")
},
content = function(file) {
# Create a new Word document
doc <- read_docx()
# Add graphs based on user selection
if ("wageBillGraph" %in% input$selected_graphs_all) {
# Render the Wage Bill Graph
wage_bill_graph <- ggplot(selected_data(), aes(x = year, y = value, color = country_name)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(
title = ifelse(input$indicator == "Wage bill as a percentage of GDP",
"Wage Bill as % of GDP Over Time",
"Wage Bill as % of Public Expenditure Over Time"),
x = "Year",
y = ifelse(input$indicator == "Wage bill as a percentage of GDP",
"Wage Bill (% of GDP)", "Wage Bill (%)")
) +
theme_minimal()
# Add Wage Bill Graph to the document
doc <- doc %>%
body_add_par("Wage Bill Graph", style = "heading 1") %>%
body_add_gg(value = wage_bill_graph, width = 6, height = 4)
}
if ("firstGraph" %in% input$selected_graphs_all) {
# Render the First Public Sector Graph
data_to_plot <- public_sector_emp_temp_last %>%
filter(country_name %in% input$countries_first)
data_to_plot_long <- data_to_plot %>%
select(country_name, indicator_name, year, value) %>%
mutate(indicator_name = factor(indicator_name))
first_graph <- ggplot(data_to_plot_long, aes(x = country_name, y = value, color = indicator_name)) +
geom_point(size = 3) +
labs(
title = "Public Sector Employment (Multi-Country)",
x = "Country",
y = "Value"
) +
theme_minimal()
# Add First Public Sector Graph to the document
doc <- doc %>%
body_add_par("First Graph: Public Sector Employment (Multi-Country)", style = "heading 1") %>%
body_add_gg(value = first_graph, width = 6, height = 4)
}
if ("secondGraph" %in% input$selected_graphs_all) {
# Render the Second Public Sector Graph
data_to_plot <- public_sector_emp_temp %>%
filter(country_name == input$country_second)
data_to_plot_long <- data_to_plot %>%
select(year, indicator_name, value) %>%
mutate(indicator_name = factor(indicator_name))
second_graph <- ggplot(data_to_plot_long, aes(x = year, y = value, color = indicator_name)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = paste("Public Sector Employment in", input$country_second, "Over Time"),
x = "Year",
y = "Employment Value"
) +
theme_minimal()
# Add Second Public Sector Graph to the document
doc <- doc %>%
body_add_par("Second Graph: Public Sector Employment (Single Country)", style = "heading 1") %>%
body_add_gg(value = second_graph, width = 6, height = 4)
}
# Save the document
print(doc, target = file)
}
)
# Define the initial world map render
output$worldMap <- renderLeaflet({
leaflet(world_spdf) %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2)  # Adjust view to show the world
})
# Reactive expression to filter data based on the selected indicator and year
filtered_data_for_map <- reactive({
req(input$indicatorSelect, input$yearSelect)  # Ensure inputs are not null
data_wwbi %>%
filter(
indicator_name == input$indicatorSelect,
!is.na(.data[[paste0("year_", input$yearSelect)]])
) %>%
transmute(
country_name,
indicator_name,
value_percentage = .data[[paste0("year_", input$yearSelect)]]
)
})
# Observe and update the map
observe({
req(input$indicatorSelect, input$yearSelect)  # Ensure inputs are not null
# Filter the data based on the selected indicator and year
reported_countries <- filtered_data_for_map()
# Debugging: If no countries are reported for the selected indicator
if (is.null(reported_countries) || nrow(reported_countries) == 0) {
warning("No reported countries for the selected indicator.")
return()  # Exit if no data is available
}
# Merge the filtered data with world_spdf
world_data_merged <- world_spdf %>%
left_join(reported_countries, by = "country_name")
# Calculate the number of countries with data
total_countries_with_data <- nrow(reported_countries)
# Update the Leaflet map
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(
data = world_data_merged,
fillColor = ~ifelse(is.na(value_percentage), "#808080", colorNumeric("Greens", domain = world_data_merged$value_percentage)(value_percentage)),
fillOpacity = 0.7,
color = "white",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~paste0(
"<strong>Country:</strong> ", country_name, "<br>",
ifelse(!is.na(value_percentage),
paste0("<strong>Value:</strong> ", round(value_percentage, 2)),
"<strong>No Data</strong>")
),
popup = ~paste(
"Country: ", country_name,
"<br>Indicator: ", indicator_name,
ifelse(!is.na(value_percentage),
paste("<br>Value: ", round(value_percentage, 2)),
"<br>No Data Available")
)
)
# Render the country count
output$countryCount <- renderText({
paste("Total Countries with Data: ", total_countries_with_data)
})
})
# Dummy outputs for widgets
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 100, icon = icon("list"), color = "blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Countries", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "blue")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "blue")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "blue")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "blue")
})
}
shinyApp(ui = ui, server = server)
