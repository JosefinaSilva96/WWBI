geom_point(size = 3) +
labs(
title = paste("Public sector wage premium, by gender in", input$country_second, "Over Time"),
x = "Year",
y = "Employment Value"
) +
theme_minimal()
# Save second graph as PNG
graph_path2 <- "C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI/second_graph_wage_premium_gender.png"
ggsave(graph_path2, plot = second_graph_wage_premium_gender, width = 6, height = 4)
# Add second graph to the Word document
doc <- doc %>%
body_add_par("Second Graph: Public Sector Employment (Single Country)", style = "heading 1") %>%
body_add_img(src = graph_path2, width = 6, height = 4) %>%
body_add_par("This graph shows the wage premium by gender trends over time for the selected country.", style = "Normal")
}
# Save the Word document
print(doc, target = file)
}
)
#Female Leadership
# Render the Plotly bar graph
output$barPlotwomen <- renderPlotly({
# Check if countries are selected
if (is.null(input$selected_countries) || length(input$selected_countries) == 0) {
return(NULL)  # Do nothing if no countries are selected
}
# Filter data based on selected countries
filtered_data <- gender_leadership %>%
filter(country_name %in% input$selected_countries)
# Ensure the filtered dataset is not empty
if (nrow(filtered_data) == 0) {
return(NULL)  # Return nothing if the filtered dataset is empty
}
# Create the Plotly bar chart
plot_ly(
data = filtered_data,
x = ~country_name,                      # X-axis: Country name
y = ~value_percentage,                  # Y-axis: Female percentage in occupation
color = ~indicator_label,                # Different color for Managers/Clerks in Public/Private
colors = c(
"Clerks-Public" = "#003366",
"Managers-Public" = "#ADD8E6",
"Clerks-Private" = "#006400",
"Managers-Private" = "#90EE90"
),                                     # Custom color mapping
type = 'bar',                           # Bar chart
barmode = 'group'                       # Group bars for Public/Private, Managers/Clerks
) %>%
layout(
title = "Females by Occupational Group and Sector",
xaxis = list(title = "Country"),      # Title for x-axis
yaxis = list(title = "Female Share (%)"), # Title for y-axis
bargap = 0.2                          # Adjust gap between bars
)
})
# Download Handler for Word Report
output$downloadGraphsWordfemale <- downloadHandler(
filename = function() {
paste0("Females_Occupation_Groups_Analysis_", Sys.Date(), ".docx")
},
content = function(file) {
doc <- read_docx()  # Start a new Word document
# Title for the report
report_title <- paste("Females by Occupational Group and Sector")
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>%
body_add_fpar(fpar(ftext(report_title, prop = title_style)))
# Filter data based on selected countries
filtered_data <- gender_leadership %>%
filter(country_name %in% input$selected_countries)
# Ensure the filtered dataset is not empty
if (nrow(filtered_data) == 0) {
return(NULL)  # Return nothing if the filtered dataset is empty
}
# Create the bar plot for Females by Occupation Group and Sector
bar_plot <- plot_ly(
data = filtered_data,
x = ~country_name,                      # X-axis: Country name
y = ~value_percentage,                  # Y-axis: Female percentage in occupation
color = ~indicator_label,                # Different color for Managers/Clerks in Public/Private
colors = c(
"Clerks-Public" = "#003366",
"Managers-Public" = "#ADD8E6",
"Clerks-Private" = "#006400",
"Managers-Private" = "#90EE90"
),                                     # Custom color mapping
type = 'bar',                           # Bar chart
barmode = 'group'                       # Group bars for Public/Private, Managers/Clerks
) %>%
layout(
title = "Females by Occupational Group and Sector",
xaxis = list(title = "Country"),      # Title for x-axis
yaxis = list(title = "Female Share (%)"), # Title for y-axis
bargap = 0.2                          # Adjust gap between bars
)
# Save the bar plot as a PNG file
ggsave("bar_plot.png", plot = bar_plot, width = 6, height = 4)
# Add the bar plot to the Word document
doc <- doc %>%
body_add_par("Females by Occupational Group and Sector", style = "heading 1") %>%
body_add_img(src = "bar_plot.png", width = 6, height = 4) %>%
body_add_par("This graph shows the share of females in various occupational groups (Managers/Clerks) in the public and private sectors for the selected countries.", style = "Normal")
# Save the Word document
print(doc, target = file)
}
)
#Download all graphs for report
output$downloadAllGraphsDoc <- downloadHandler(
filename = function() {
paste0("Comprehensive_Wage_Bill_Report_", Sys.Date(), ".docx")
},
content = function(file) {
# Dynamic title with the first country
report_title <- paste("Wage Bill and public employment Analysis Report")
# Create a Word document
doc <- read_docx()
# Define the style for the title with a specific color and bold
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)  # Custom color and bold text
# Apply the custom title style with color and bold
doc <- doc %>%
body_add_fpar(
fpar(ftext(report_title, prop = title_style))  # Apply custom title style with dynamic title
)
# Add the introduction heading without numbering
doc <- doc %>%
body_add_par("Introduction", style = "heading 2") %>%  # Use heading style without numbering
body_add_par("This note presents evidence on public sector employment and compensation practices in Bangladesh using the Worldwide Bureaucracy Indicators (WWBI). The primary data source is the Labor Force Survey (LFS), conducted by the Bangladesh Bureau of Statistics (BBS), which offers extensive, nationally representative data over multiple years up to 2022. The LFSâ€™s comprehensive coverage of employment and wage issues across both public and private sectors, along with its frequency and national representativeness, makes it an ideal source for this analysis.
For international comparisons, the analysis includes a set of peer countries for benchmarking, with a particular focus on countries from the South Asia region and other aspirational peers. Information on these peers was also sourced from the WWBI.
The public sector is typically a major source of employment in most countries. The provision of basic services such as education, health, citizen security and justice, among others, makes it a central actor in labor markets, with significant impacts on the aggregate results of employment, wages, informality, and other economic variables. Moreover, public employment is an indicator of the state participation in the entire economy, which has implications for macroeconomic balances, allocation efficiency and income distribution. Thus, this analysis comprehensively documents the size of public employment, its changes over time, and the characteristics of its workforce.")
# List of key indicators in the introduction
doc <- doc %>%
body_add_par("- Wage Bill as a Percentage of GDP", style = "Normal") %>%
body_add_par("- Wage Bill as a Percentage of Public Expenditure", style = "Normal")
# Section 1: Wage Bill (as % of GDP)
doc <- doc %>%
body_add_par("Wage Bill (as % of GDP)", style = "heading 2")
graph1 <- ggplot(selected_data(), aes(x = year, y = value, color = country_name)) +
geom_line() +
labs(title = "Wage Bill as % of GDP Over Time", x = "Year", y = "Wage Bill (% of GDP)")
doc <- doc %>% body_add_gg(graph1, style = "centered")
# Section 2: Wage Bill (as % of Public Expenditure)
doc <- doc %>%
body_add_par("Wage Bill (as % of Public Expenditure)", style = "heading 2")
graph2 <- ggplot(selected_data(), aes(x = year, y = value, color = country_name)) +
geom_line() +
labs(title = "Wage Bill as % of Public Expenditure Over Time", x = "Year", y = "Wage Bill (% of Public Expenditure)")
doc <- doc %>% body_add_gg(graph2, style = "centered")
# Section 3: Wage Bill vs. GDP
doc <- doc %>%
body_add_par("Wage Bill vs. GDP per Capita", style = "heading 2")
dot_plot <- ggplot(filtered_data(), aes(x = log_gdp, y = indicator_value, color = country_name)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = "gray", linetype = "dashed") +
labs(title = "Wage Bill vs. Log(GDP per Capita)", x = "Log(GDP per Capita, 2015)", y = "Wage Bill")
doc <- doc %>% body_add_gg(dot_plot, style = "centered")
# Save the document
print(doc, target = file)
}
)
# Define the color scale based on the dynamic data range
output$worldMap <- renderLeaflet({
# Determine the min and max values from the filtered data
data_values <- filtered_data_for_map()
color_pal <- colorNumeric("Greens", domain = c(min(data_values$value_percentage, na.rm = TRUE),
max(data_values$value_percentage, na.rm = TRUE)))
leaflet(world_spdf) %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2) %>%
addLegend(
position = "bottomright",
pal = color_pal,
values = c(min(data_values$value_percentage, na.rm = TRUE),
max(data_values$value_percentage, na.rm = TRUE)),
title = "Indicator Value",
opacity = 1
)
})
# Reactive expression to filter data based on the selected indicator and year
filtered_data_for_map <- reactive({
req(input$indicatorSelect, input$yearSelect)  # Ensure inputs are not null
data_wwbi %>%
filter(
indicator_name == input$indicatorSelect,
!is.na(.data[[paste0("year_", input$yearSelect)]])
) %>%
transmute(
country_name,
indicator_name,
value_percentage = .data[[paste0("year_", input$yearSelect)]]
)
})
# Observe and update the map
observe({
req(input$indicatorSelect, input$yearSelect)  # Ensure inputs are not null
# Filter the data based on the selected indicator and year
reported_countries <- filtered_data_for_map()
# Debugging: If no countries are reported for the selected indicator
if (is.null(reported_countries) || nrow(reported_countries) == 0) {
warning("No reported countries for the selected indicator.")
return()  # Exit if no data is available
}
# Merge the filtered data with world_spdf
world_data_merged <- world_spdf %>%
left_join(reported_countries, by = "country_name")
# Determine the min and max values from the filtered data for dynamic scaling
color_pal <- colorNumeric("Greens", domain = c(min(reported_countries$value_percentage, na.rm = TRUE),
max(reported_countries$value_percentage, na.rm = TRUE)))
# Update the Leaflet map with new polygons based on the selected indicator
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(
data = world_data_merged,
fillColor = ~ifelse(is.na(value_percentage), "#808080", color_pal(value_percentage)),
fillOpacity = 0.7,
color = "white",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~paste0(
"<strong>Country:</strong> ", country_name, "<br>",
ifelse(!is.na(value_percentage),
paste0("<strong>Value:</strong> ", round(value_percentage, 2)),
"<strong>No Data</strong>")
),
popup = ~paste(
"Country: ", country_name,
"<br>Indicator: ", indicator_name,
ifelse(!is.na(value_percentage),
paste("<br>Value: ", round(value_percentage, 2)),
"<br>No Data Available")
)
)
# Render the country count
output$countryCount <- renderText({
paste("Total Countries with Data: ", nrow(reported_countries))
})
})
# Render the country count
output$countryCount <- renderText({
paste("Total Countries with Data: ", nrow(reported_countries))
})
# Dummy outputs for widgets
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 302, icon = icon("list"), color = "blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Economies", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "blue")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "blue")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "blue")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "blue")
})
}
shinyApp(ui = ui, server = server)
ui <- bootstrapPage(
theme = bs_theme(version = 5, bootswatch = 'quartz'),
# Custom CSS for the sidebar
tags$style(HTML("
#sidebar {
height: 100vh;
background: linear-gradient(to bottom, #56ccf2, #2f80ed);
padding: 20px;
color: white;
}
#sidebar .nav-item {
margin: 15px 0;
font-size: 18px;
font-weight: bold;
color: white;
text-decoration: none;
}
#sidebar .nav-item.active {
background-color: #eb2f96;
padding: 10px;
border-radius: 20px;
color: white;
}
#sidebar .nav-item:hover {
cursor: pointer;
color: #eb2f96;
}
")),
# Layout with sidebar and content
div(
class = "d-flex",
# Sidebar
div(
id = "sidebar",
div(class = "nav-item", actionLink("nav_overview", "Overview")),
div(class = "nav-item", actionLink("nav_education", "Education")),
div(class = "nav-item", actionLink("nav_health", "Health")),
div(class = "nav-item", actionLink("nav_about", "About"))
),
# Main content area
div(
class = "flex-grow-1 p-4",
h2("WWB Indicators"),
uiOutput("main_content")
)
)
)
server <- function(input, output, session) {
# Reactive value to track active tab
active_tab <- reactiveVal("overview")
# Update the active tab when clicking on sidebar items
observeEvent(input$nav_overview, {
active_tab("overview")
})
observeEvent(input$nav_education, {
active_tab("education")
})
observeEvent(input$nav_health, {
active_tab("health")
})
observeEvent(input$nav_about, {
active_tab("about")
})
# Dynamic main content based on active tab
output$main_content <- renderUI({
tab <- active_tab()
if (tab == "overview") {
div(
h3("Dashboard Overview"),
p("Welcome to the Worldwide Bureaucracy Indicators (WWBI). This dashboard provides insights into public sector employment and wages. Use the menu to navigate.")
)
} else if (tab == "education") {
div(
h3("Education Graphs"),
plotlyOutput("education_graph", height = "400px")
)
} else if (tab == "health") {
div(
h3("Health Graphs"),
plotlyOutput("health_graph", height = "400px")
)
} else if (tab == "about") {
div(
h3("About"),
p("This dashboard was created to explore data on public sector employment and wages.")
)
}
})
# Education graph
output$education_graph <- renderPlotly({
plot_ly(
data = merged_data,
x = ~country_name,
y = ~wage_bill,
type = "bar",
text = ~paste0("Wage Bill: ", wage_bill),
marker = list(color = 'rgba(0, 123, 255, 0.7)')
) %>%
layout(
title = list(text = "Education Wage Bill by Country", font = list(size = 14)),
xaxis = list(title = "", tickangle = -45),
yaxis = list(title = "Wage Bill")
)
})
# Health graph
output$health_graph <- renderPlotly({
plot_ly(
data = merged_data,
x = ~country_name,
y = ~gdp_per_capita,
type = "scatter",
mode = "markers",
text = ~paste0("GDP per Capita: ", gdp_per_capita),
marker = list(size = 10, color = 'rgba(255, 123, 0, 0.7)')
) %>%
layout(
title = list(text = "Health Indicators by Country", font = list(size = 14)),
xaxis = list(title = "Country"),
yaxis = list(title = "GDP per Capita")
)
})
}
shinyApp(ui = ui, server = server)
# Sample data for demonstration
merged_data <- data.frame(
country_name = c("USA", "Canada", "Germany", "France", "Brazil"),
wage_bill = c(500, 300, 450, 400, 350),
gdp_per_capita = c(60000, 45000, 50000, 47000, 15000),
stringsAsFactors = FALSE
)
ui <- bootstrapPage(
theme = bs_theme(version = 5, bootswatch = 'quartz'),
# Custom CSS for the sidebar
tags$style(HTML("
#sidebar {
height: 100vh;
background: linear-gradient(to bottom, #56ccf2, #2f80ed);
padding: 20px;
color: white;
}
#sidebar .nav-item {
margin: 15px 0;
font-size: 18px;
font-weight: bold;
color: white;
text-decoration: none;
}
#sidebar .nav-item.active {
background-color: #eb2f96;
padding: 10px;
border-radius: 20px;
color: white;
}
#sidebar .nav-item:hover {
cursor: pointer;
color: #eb2f96;
}
")),
# Layout with sidebar and content
div(
class = "d-flex",
# Sidebar
div(
id = "sidebar",
div(class = "nav-item", actionLink("nav_overview", "Overview")),
div(class = "nav-item", actionLink("nav_education", "Education")),
div(class = "nav-item", actionLink("nav_health", "Health")),
div(class = "nav-item", actionLink("nav_about", "About"))
),
# Main content area
div(
class = "flex-grow-1 p-4",
h2("WWB Indicators"),
uiOutput("main_content")
)
)
)
server <- function(input, output, session) {
# Reactive value to track active tab
active_tab <- reactiveVal("overview")
# Update the active tab when clicking on sidebar items
observeEvent(input$nav_overview, {
active_tab("overview")
})
observeEvent(input$nav_education, {
active_tab("education")
})
observeEvent(input$nav_health, {
active_tab("health")
})
observeEvent(input$nav_about, {
active_tab("about")
})
# Dynamic main content based on active tab
output$main_content <- renderUI({
tab <- active_tab()
if (tab == "overview") {
div(
h3("Dashboard Overview"),
p("Welcome to the Worldwide Bureaucracy Indicators (WWBI). This dashboard provides insights into public sector employment and wages. Use the menu to navigate.")
)
} else if (tab == "education") {
div(
h3("Education Graphs"),
plotlyOutput("education_graph", height = "400px")
)
} else if (tab == "health") {
div(
h3("Health Graphs"),
plotlyOutput("health_graph", height = "400px")
)
} else if (tab == "about") {
div(
h3("About"),
p("This dashboard was created to explore data on public sector employment and wages.")
)
}
})
# Education graph
output$education_graph <- renderPlotly({
plot_ly(
data = merged_data,
x = ~country_name,
y = ~wage_bill,
type = "bar",
text = ~paste0("Wage Bill: ", wage_bill),
marker = list(color = 'rgba(0, 123, 255, 0.7)')
) %>%
layout(
title = list(text = "Education Wage Bill by Country", font = list(size = 14)),
xaxis = list(title = "", tickangle = -45),
yaxis = list(title = "Wage Bill")
)
})
# Health graph
output$health_graph <- renderPlotly({
plot_ly(
data = merged_data,
x = ~country_name,
y = ~gdp_per_capita,
type = "scatter",
mode = "markers",
text = ~paste0("GDP per Capita: ", gdp_per_capita),
marker = list(size = 10, color = 'rgba(255, 123, 0, 0.7)')
) %>%
layout(
title = list(text = "Health Indicators by Country", font = list(size = 14)),
xaxis = list(title = "Country"),
yaxis = list(title = "GDP per Capita")
)
})
}
shinyApp(ui = ui, server = server)
