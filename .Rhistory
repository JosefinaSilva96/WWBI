lowest_private <- country_summary %>%
filter(private_compression == min(private_compression, na.rm = TRUE)) %>% pull(country_name)
first_country_values <- country_summary %>% filter(country_name == first_country)
first_public_compression <- first_country_values %>% pull(public_compression) %>% coalesce(NA)
first_private_compression <- first_country_values %>% pull(private_compression) %>% coalesce(NA)
other_countries_avg <- country_summary %>%
filter(country_name != first_country) %>%
summarise(
avg_public_compression = round(mean(public_compression, na.rm = TRUE), 1),
avg_private_compression = round(mean(private_compression, na.rm = TRUE), 1)
)
if (first_country %in% country_summary$country_name) {
rank_public <- rank(-country_summary$public_compression, ties.method = "min")[country_summary$country_name == first_country]
rank_private <- rank(-country_summary$private_compression, ties.method = "min")[country_summary$country_name == first_country]
public_position <- dplyr::case_when(
rank_public == 1 ~ "the highest",
rank_public == nrow(country_summary) ~ "the lowest",
TRUE ~ "in the middle range"
)
private_position <- dplyr::case_when(
rank_private == 1 ~ "the highest",
rank_private == nrow(country_summary) ~ "the lowest",
TRUE ~ "in the middle range"
)
} else {
public_position <- "unranked"
private_position <- "unranked"
}
interpretation_text <- paste0(
"This figure compares pay compression ratios (90th/10th percentile) in the public and private sectors.\n\n",
"For ", first_country, ", the pay compression ratio is ", first_public_compression,
" in the public sector and ", first_private_compression, " in the private sector.\n\n",
"Among the selected countries, ", highest_public, " has the highest public sector pay compression, while ",
lowest_public, " has the lowest public sector pay compression.\n\n",
"In the private sector, ", highest_private, " has the highest pay compression, whereas ",
lowest_private, " has the lowest.\n\n",
first_country, " is ranked ", public_position, " in public sector compression and ",
private_position, " in private sector compression compared to other selected countries.\n\n",
"A higher compression ratio indicates greater income disparity within the sector. The trendline provides an overall pattern, and the 45-degree reference line represents equality between public and private sector compression."
)
plot <- ggplot(filtered_data_df, aes(x = Private_Sector, y = Public_Sector, label = country_name)) +  # or group variable
geom_point(size = 3) +
geom_text(vjust = -0.5, size = 3) +
geom_smooth(method = "lm", color = "gray", linetype = "dashed") +
labs(
title = "Pay Compression: Public vs. Private Sector",
x = "Private Sector Pay Compression",
y = "Public Sector Pay Compression"
) +
scale_color_viridis(discrete = TRUE, option = "D") +
theme_minimal()
img_path <- tempfile(fileext = ".png")
ggsave(filename = img_path, plot = plot, width = 8, height = 6, dpi = 300)
doc <- doc %>%
body_add_img(src = img_path, width = 6, height = 4) %>%
body_add_par("Note: The trendline provides a visual reference for overall patterns across countries.", style = "Normal") %>%
body_add_par(paste(interpretation_text, collapse = ""), style = "Normal")
return(doc)
}
generate_pay_compression_slide <- function(ppt, selected_countries) {
if (is.null(selected_countries) || length(na.omit(selected_countries)) == 0) {
return(ppt)
}
filtered_data_df <- pay_compression_wide %>%
filter(country_name %in% selected_countries)
req(nrow(filtered_data_df) > 0)
# Create summary for plot
plot <- ggplot(filtered_data_df, aes(x = Private_Sector, y = Public_Sector, label = country_name)) +  # or group variable
geom_point(size = 3) +
geom_text(vjust = -0.5, size = 3) +
geom_smooth(method = "lm", color = "gray", linetype = "dashed") +
labs(
title = "Pay Compression: Public vs. Private Sector",
x = "Private Sector Pay Compression",
y = "Public Sector Pay Compression"
) +
scale_color_viridis(discrete = TRUE, option = "D") +
theme_minimal()
# Save plot as image
img_path <- tempfile(fileext = ".png")
ggsave(filename = img_path, plot = plot, width = 6, height = 6, dpi = 300)
# Add slide with only the image
ppt <- ppt %>%
add_slide(layout = "Title and Content", master = "Office Theme") %>%
ph_with(external_img(img_path, height = 4, width = 4),
location = ph_location_type(type = "body"))
return(ppt)
}
generate_conclusion_section <- function(doc) {
# Add Section Title
doc <- doc %>% body_add_par("Conclusion", style = "heading 1")
# Add Conclusion Text
doc <- doc %>% body_add_par(
"This report provides a comprehensive analysis of wage bill trends, gender employment representation, and workforce participation in the public sector.
The findings highlight key trends and disparities across different sectors and countries.",
style = "Normal"
)
return(doc)
}
#Download CVS
output$dl_csv_pay_compression <- downloadHandler(
filename = function() paste0("pay_compression_public_vs_private_", Sys.Date(), ".csv"),
content  = function(file) {
# empty schema so you never get a structurally blank file
empty_schema <- tibble::tibble(
country_name    = character(),
year            = integer(),
private_sector  = numeric(),
public_sector   = numeric()
)
# need selected countries
if (is.null(input$countries_first) || !length(input$countries_first)) {
utils::write.csv(empty_schema, file, row.names = FALSE, na = "", fileEncoding = "UTF-8")
return()
}
# filter source used by the plot
d <- pay_compression_wide %>%
dplyr::filter(country_name %in% input$countries_first)
# ensure required columns exist
if (!all(c("Public_Sector", "Private_Sector") %in% names(d))) {
utils::write.csv(empty_schema, file, row.names = FALSE, na = "", fileEncoding = "UTF-8")
return()
}
# include year if present; otherwise fill NA
out <- d %>%
dplyr::transmute(
country_name,
year           = if ("year" %in% names(d)) as.integer(.data[["year"]]) else NA_integer_,
private_sector = as.numeric(Private_Sector),
public_sector  = as.numeric(Public_Sector)
) %>%
dplyr::arrange(country_name)
if (nrow(out) == 0) out <- empty_schema
utils::write.csv(out, file, row.names = FALSE, na = "", fileEncoding = "UTF-8")
}
)
add_section_slide <- function(ppt, title) {
ppt %>%
add_slide(layout = "Title Slide", master = "Office Theme") %>%
ph_with(
value = fpar(
ftext(title, prop = fp_text(color = "#003366", font.size = 40, bold = TRUE))
),
location = ph_location_type(type = "ctrTitle")
)
}
#Download selected graphs
output$downloadSelectedGraphsDoc <- downloadHandler(
filename = function() {
paste0("Wage_bill_and_public_employment_analysis_Selected_Report_", Sys.Date(), ".docx")
},
content = function(file) {
# Get the selected countries dynamically
selected_countries <- input$download_report_countries
# Initialize Word document
doc <- read_docx()
# Add Report Title
title_style <- fp_text(color = "#722F37", font.size = 20, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext("Wage bill and public employment analysis", prop = title_style)))
doc <- generate_intro_section(doc, selected_countries)  # Add the Intro First
# Define Section Style
section_style <- fp_text(color = "#003366", font.size = 14, bold = TRUE)
# ✅ Dynamically include only selected sections
selected_sections <- input$selected_graphs
# ✅ Ensure selected_sections is not NULL before checking length
if (is.null(selected_sections) || length(selected_sections) == 0) {
doc <- doc %>% body_add_par("No sections selected for download.", style = "Normal")
} else {
if ("wagebill" %in% selected_sections) {
doc <- generate_wage_bill_analysis_section(doc, selected_countries)
}
if ("wagebill_gdp" %in% selected_sections) {
doc <- generate_gdp_analysis_section(doc, selected_countries)
}
if ("tertiaryeducation" %in% selected_sections) {
doc <- generate_tertiary_education_section(doc, selected_countries)
}
if ("genderwagepremium" %in% selected_sections) {
doc <- generate_wage_premium_gender_section(doc, selected_countries)
}
if ("wagepremiumeducation" %in% selected_sections) {
doc <- generate_wage_premium_education_section(doc, selected_countries)
}
if ("public_employment" %in% selected_sections) {
doc <- generate_public_sector_employment_section(doc, selected_countries)
}
if ("wagepremiumgender" %in% selected_sections) {
doc <- generate_wage_premium_gender_report_section(doc, selected_countries)
}
if ("public_workforce" %in% selected_sections) {
doc <- generate_public_sector_workforce_section(doc, selected_countries)
}
if ("gender_workforce" %in% selected_sections) {
doc <- generate_gender_workforce_section(doc, selected_countries)
}
if ("female_leadership" %in% selected_sections) {  # Fixed typo from "femaleocuupation"
doc <- generate_females_occupation_groups_section(doc, selected_countries)
}
if ("wagepremium" %in% selected_sections) {
doc <- generate_wage_premium_report_section(doc, selected_countries)
}
if ("gender_wage_premium" %in% selected_sections) {
doc <- generate_gender_wage_premiumbysector_section(doc, selected_countries)
}
if ("pay_compression" %in% selected_sections) {
doc <- generate_pay_compression_section(doc, selected_countries = selected_countries)
}
}
# ✅ Save the customized report
print(doc, target = file)
}
)
#Download one single report
output$downloadAllGraphsDoc <- downloadHandler(
filename = function() {
paste0("Wage_bill_and_public_employment_analysis_", Sys.Date(), ".docx")
},
content = function(file) {
selected_countries <- input$download_report_countries # ✅ Use country selector from the download tab
# Initialize Word document
doc <- read_docx()
# Title
title_style <- fp_text(color = "#722F37", font.size = 20, bold = TRUE)
doc <- doc %>%
body_add_fpar(fpar(ftext("", prop = title_style))) %>%
generate_intro_section(selected_countries)
# Section Header Style
section_style <- fp_text(color = "#003366", font.size = 14, bold = TRUE)
# ──────────────────────────────────────
# 📘 Section 1: Macro-Fundamentals
# ──────────────────────────────────────
doc <- doc %>%
body_add_fpar(fpar(ftext("Macro-Fundamentals of the Public Sector", prop = section_style))) %>%
generate_wage_bill_analysis_section(selected_countries) %>%
generate_gdp_analysis_section(selected_countries)
# ──────────────────────────────────────
# 📘 Section 2: Size and Characteristics
# ──────────────────────────────────────
doc <- doc %>%
body_add_fpar(fpar(ftext("Size and Characteristics of the Public Sector", prop = section_style))) %>%
generate_public_sector_employment_section(selected_countries) %>%
generate_tertiary_education_section(selected_countries)
# ──────────────────────────────────────
# 📘 Section 3: Competitiveness of Public Sector Wages
# ──────────────────────────────────────
doc <- doc %>%
body_add_fpar(fpar(ftext("Competitiveness of Public Sector Wages", prop = section_style))) %>%
body_add_par(
"Public sector compensation should theoretically be designed with an awareness of its influence on the broader labor market. According to the theory of “compensating wage differentials,” a job should pay more (or less) depending on its non-wage characteristics that are undesirable (or desirable)...",
style = "Normal"
) %>%
generate_wage_premium_report_section(selected_countries) %>%
generate_wage_premium_education_section(selected_countries) %>%
generate_pay_compression_section(selected_countries = selected_countries)
# ──────────────────────────────────────
# 📘 Section 4: Equity in the Public Sector
# ──────────────────────────────────────
doc <- doc %>%
body_add_fpar(fpar(ftext("Equity in the Public Sector", prop = section_style))) %>%
generate_gender_workforce_section(selected_countries) %>%
generate_females_occupation_groups_section(selected_countries) %>%
generate_gender_wage_premiumbysector_section(selected_countries) %>%
generate_wage_premium_gender_report_section(selected_countries)
# ──────────────────────────────────────
# 📘 Conclusion
# ──────────────────────────────────────
doc <- generate_conclusion_section(doc)
# Save final report
print(doc, target = file)
}
)
#Power Point Slides
output$downloadSelectedGraphsPPT <- downloadHandler(
filename = function() {
paste0("Wage_bill_and_public_employment_analysis_Selected_Presentation_", Sys.Date(), ".pptx")
},
content = function(file) {
selected_countries <- input$download_report_countries
selected_sections <- input$selected_graphs
# Initialize PowerPoint
ppt <- read_pptx()
# Add a title slide
ppt <- ppt %>%
add_slide(layout = "Title Slide", master = "Office Theme") %>%
ph_with("Wage bill and public employment analysis", location = ph_location_type(type = "ctrTitle")) %>%
ph_with(paste("Generated on", Sys.Date()), location = ph_location_type(type = "subTitle"))
# Only include selected graphs
if (!is.null(selected_sections) && length(selected_sections) > 0) {
if ("wagebill" %in% selected_sections || "wagebill_gdp" %in% selected_sections) {
ppt <- add_section_slide(ppt, "Macro-Fundamentals of the Public Sector")
}
if ("wagebill" %in% selected_sections) {
ppt <- generate_wage_bill_analysis_slide(ppt, selected_countries)
}
if ("wagebill_gdp" %in% selected_sections) {
ppt <- generate_gdp_analysis_slide(ppt, selected_countries)
}
if ("public_employment" %in% selected_sections || "public_workforce" %in% selected_sections || "tertiaryeducation" %in% selected_sections) {
ppt <- add_section_slide(ppt, "Size and Characteristics of the Public Sector")
}
if ("public_employment" %in% selected_sections) {
ppt <- generate_public_sector_employment_slide(ppt, selected_countries)
}
if ("public_workforce" %in% selected_sections) {
ppt <- generate_public_sector_workforce_slide(ppt, selected_countries)
}
if ("tertiaryeducation" %in% selected_sections) {
ppt <- generate_tertiary_education_slide(ppt, selected_countries)
}
if ("genderwagepremium" %in% selected_sections || "wagepremiumeducation" %in% selected_sections || "pay_compression" %in% selected_sections) {
ppt <- add_section_slide(ppt, "Competiiveness of public sector wages")
}
if ("genderwagepremium" %in% selected_sections) {
ppt <- generate_wage_premium_gender_slide(ppt, selected_countries)
}
if ("wagepremiumeducation" %in% selected_sections) {
ppt <-generate_wage_premium_education_slide(ppt, selected_countries)
}
if ("pay_compression" %in% selected_sections) {
ppt <- generate_pay_compression_slide(ppt, selected_countries)
}
if ("wagepremiumgender" %in% selected_sections || "gender_workforce" %in% selected_sections || "gender_wage_premium" %in% selected_sections
|| "female_leadership" %in% selected_sections) {
ppt <- add_section_slide(ppt, "Equity in public sector")
}
if ("wagepremiumgender" %in% selected_sections) {
ppt <- generate_wage_premium_gender_report_slide(ppt, selected_countries)
}
if ("gender_workforce" %in% selected_sections) {
ppt <- generate_gender_workforce_slide(ppt, selected_countries)
}
if ("gender_wage_premium" %in% selected_sections) {
ppt <- generate_gender_wage_premiumbysector_slide(ppt, selected_countries)
}
if ("female_leadership" %in% selected_sections) {
ppt <- generate_females_occupation_groups_slide(ppt, selected_countries)
}
# add more slide generators here as needed
} else {
# If no selection: optionally include a placeholder slide
ppt <- ppt %>%
add_slide(layout = "Title and Content", master = "Office Theme") %>%
ph_with_text(type = "title", str = "No graphs selected") %>%
ph_with_text(type = "body", str = "Please select at least one graph to download.")
}
# Save the PowerPoint
print(ppt, target = file)
}
)
# ---------------------
# Clean base map with legend
output$worldMap <- renderLeaflet({
leaflet(world_spdf) %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2) %>%
addLegend(
position = "bottomright",
colors = c("gray", "#6DA96F"),
labels = c("No Data", "Reported"),
title = "Indicator Availability",
opacity = 1
)
})
# Create reactive that flags countries that have ANY data for the selected indicator
filtered_data_for_map <- reactive({
req(input$indicatorSelect)
data_wwbi %>%
filter(indicator_name == input$indicatorSelect) %>%
mutate(
any_data = apply(select(., starts_with("year_")), 1, function(x) any(!is.na(x)))
) %>%
filter(any_data) %>%
transmute(country_name, indicator_name, has_data = 1)  # use 'has_data' instead of value_percentage
})
# Update the map
observe({
req(input$indicatorSelect)
reported_countries <- filtered_data_for_map()
if (nrow(reported_countries) == 0) return()
# Match the country names to the shapefile column
world_data_merged <- world_spdf %>%
left_join(reported_countries, by = c("name_long" = "country_name"))
# Use a factor color palette based on 0 (missing) and 1 (has data)
color_pal <- colorFactor(palette = c("gray", "#6DA96F"), domain = c(0, 1))
leafletProxy("worldMap") %>% clearShapes() %>%
addPolygons(
data = world_data_merged,
fillColor = ~color_pal(ifelse(is.na(has_data), 0, has_data)),
fillOpacity = 0.7,
color = "white",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~paste0("Country: ", name_long, "-",
ifelse(!is.na(has_data), "Reported", "No Data")),
popup = ~paste(
"Country:", name_long, "-",
"Indicator:", ifelse(!is.na(indicator_name), indicator_name, "None"), "-",
ifelse(!is.na(has_data), "Reported", "No Data Available")
)
)
output$countryCount <- renderText({
paste("Total Countries with Data:", nrow(reported_countries))
})
})
# Change info Box colors to "purple" to match the quartz theme
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 302, icon = icon("list"), color = "purple")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Economies", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "purple")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "purple")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "purple")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2025", icon = icon("clock"), color = "purple")
})
}
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::setAccountInfo(name='josefinasilva',
token='5D94A6CF62F6F53239E6D3B3F37FAC59',
secret='32ZspNnk/r87eYOxHPb9daJ0MrGTjeTFj5F6H8lw')
rsconnect::deployApp(appName = "WWBI_ShinyApp")
library(haven)
library(dplyr)
library(tidyr)
library(stringr)
library(labelled)
library(data.table)
library(ggplot2)
library(shiny)
library(shinythemes)
library(DT)
library(maps)
library(mapdata)
library(leaflet)
library(rnaturalearth)
library(sf)
library(plotly)
library(officer)
library(viridis)
library(here)
library(glue)
library(colourpicker)
library(htmlwidgets)
library(bs4Dash)
library(countrycode)
library(bslib)
library(ggthemes)
library(shinyBS)
rsconnect::writeManifest()
list.files()
setwd(C:/WBG/GitHub/WWBI/WWBI_ShinyApp)
setwd("C:/WBG/GitHub/WWBI/WWBI_ShinyApp")
rsconnect::writeManifest()
rsconnect::writeManifest(contentCategory = "shiny")
rsconnect::writeManifest(
appPrimaryDoc = "index.html",
contentCategory = "site"
)
rsconnect::writeManifest(contentCategory = "site")
rsconnect::writeManifest(...,
image = "ghcr.io/rstudio/content-base:r4.0.5-py3.8.8-jammy")
setwd("C:/WBG/GitHub/WWBI/WWBI_ShinyApp")
rsconnect::writeManifest()
rsconnect::writeManifest()
git add WWBI_ShinyApp/manifest.json
rsconnect::deployApp(appDir = ".", appName = "wwbi-shiny")
setwd("path/to/WWBI_ShinyApp")
library(haven)
library(dplyr)
library(tidyr)
library(stringr)
library(labelled)
library(data.table)
library(ggplot2)
library(shiny)
library(shinythemes)
library(DT)
library(maps)
library(mapdata)
library(leaflet)
library(rnaturalearth)
library(sf)
library(plotly)
library(officer)
library(viridis)
library(here)
library(glue)
library(colourpicker)
library(htmlwidgets)
library(bs4Dash)
library(countrycode)
library(bslib)
library(ggthemes)
library(shinyBS)
setwd("path/to/WWBI_ShinyApp")
rsconnect::writeManifest()
rsconnect::writeManifest(appPrimaryDoc = "app.R")
rsconnect::writeManifest(appPrimaryDoc = "app.R")
source("ui.R", local = TRUE)
setwd("C:/WBG/GitHub/WWBI/WWBI_ShinyApp")
source("ui.R", local = TRUE)
source("server.R", local = TRUE)
stopifnot(exists("ui"), exists("server"))
shinyApp(ui = ui, server = server)
rsconnect::writeManifest(appPrimaryDoc = "app.R")
rsconnect::writeManifest(appPrimaryDoc = "app.R")
