tabItem(tabName = "wageBillGraphs",
fluidRow(
box(title = "WWB Indicator Selection", status = "primary", solidHeader = TRUE, width = 4,
selectInput("indicator", "Select a WWB Indicator",
choices = c("Wage bill (as % of public expenditure) over time",
"Wage bill as a percentage of GDP"))
),
box(title = "Country Selection", status = "primary", solidHeader = TRUE, width = 8,
selectInput("countries", "Countries",
choices = unique(filtered_data$country_name),
selected = unique(filtered_data$country_name)[1],
multiple = TRUE)
)
),
fluidRow(
box(title = "Graph", status = "primary", solidHeader = TRUE, width = 12,
plotlyOutput("plot")
)
)
),
# Public Sector Graphs Tab
tabItem(tabName = "publicSectorGraphs",
fluidRow(
box(title = "First Graph - Multi-Country Selection", status = "primary", solidHeader = TRUE, width = 12,
selectInput("countries_first",
"Select Countries for First Graph",
choices = unique(public_sector_emp_temp$country_name),
selected = NULL,
multiple = TRUE)
)
),
fluidRow(
box(title = "First Graph", status = "primary", solidHeader = TRUE, width = 12,
plotlyOutput("firstGraph")
)
),
fluidRow(
box(title = "Second Graph - Single Country Selection", status = "primary", solidHeader = TRUE, width = 12,
selectInput("country_second",
"Select Country for Second Graph",
choices = unique(public_sector_emp_temp$country_name),
selected = NULL,
multiple = FALSE)
)
),
fluidRow(
box(title = "Second Graph", status = "primary", solidHeader = TRUE, width = 12,
plotlyOutput("secondGraph")
)
)
),
# Public Sector Workforce Graphs Tab
tabItem(tabName = "publicSectorWorkforceGraphs",
fluidRow(
box(title = "Country Selection", status = "primary", solidHeader = TRUE, width = 12,
selectInput("countries_workforce",
"Select Countries for Workforce Graph",
choices = unique(public_sector_workforce$country_name),
selected = unique(public_sector_workforce$country_name)[1],
multiple = TRUE)
)
),
fluidRow(
box(title = "Stacked Bar Chart", status = "primary", solidHeader = TRUE, width = 12,
plotlyOutput("stackedBarGraph", height = "600px")
)
),
fluidRow(
box(title = "Select Country (Second Graph)", status = "primary", solidHeader = TRUE, width = 12,
selectInput("selected_country",
"Select Country for Second Graph",
choices = unique(public_sector_workforce$country_name),
selected = NULL,
multiple = FALSE)
)
),
fluidRow(
box(title = "Second Graph: Horizontal Stacked Bar (Single Country)", status = "primary", solidHeader = TRUE, width = 12,
uiOutput("messageOutput"),
plotlyOutput("horizontalStackedBar")
)
)
),
# Gender Workforce Graphs Tab
tabItem(
tabName = "genderWorkforceGraphs",
# First Graph: Multiple Countries Selection
fluidRow(
box(
title = "Country Selection (Multiple Countries)",
status = "primary",
solidHeader = TRUE,
width = 12,
selectInput(
inputId = "countries_workforce",
label = "Select Countries for Workforce Graph",
choices = unique(public_sector_workforce$country_name),
selected = unique(public_sector_workforce$country_name)[1],
multiple = TRUE # Allow multiple countries selection
)
)
),
fluidRow(
box(
title = "Female Employment by Sector (Multiple Countries)",
status = "primary",
solidHeader = TRUE,
width = 12,
plotlyOutput(outputId = "employment_plot", height = "600px")
)
),
# Second Graph: Single Country Selection
fluidRow(
box(
title = "Country Selection (Single Country)",
status = "primary",
solidHeader = TRUE,
width = 12,
selectInput(
inputId = "selected_country",
label = "Select Country for Second Graph",
choices = unique(gender_workforce$country_name),
selected = unique(gender_workforce$country_name)[1],
multiple = FALSE # Allow single country selection
)
)
),
fluidRow(
box(
title = "Gender Workforce Over Time (Single Country)",
status = "primary",
solidHeader = TRUE,
width = 12,
plotlyOutput(outputId = "employment_plot_overtime", height = "600px")
)
)
),
# Indicators Tab
tabItem(tabName = "indicators",
fluidRow(
box(title = "Indicator Status Across Countries", status = "primary", solidHeader = TRUE, width = 12,
"This map shows which countries have reported data for the selected indicator."
)
),
fluidRow(
box(title = "Select Indicator", status = "primary", solidHeader = TRUE, width = 12,
selectInput("indicatorSelect", "Choose Indicator",
choices = c("Wage bill (as % of public expenditure) over time",
"Wage bill as a percentage of GDP",
"Public sector employment as a share of total workforce"))
)
),
fluidRow(
box(title = "World Map", status = "primary", solidHeader = TRUE, width = 12,
leafletOutput("worldMap", height = 500)
)
)
)
)
)
)
server <- function(input, output, session) {
# Reactive expression to select the appropriate dataset based on the indicator
selected_data <- reactive({
req(input$countries)  # Ensure 'countries' input is available
if (input$indicator == "Wage bill as a percentage of GDP") {
# Filter wage_bill_gdp dataset based on selected countries
data <- wage_bill_gdp %>% filter(country_name %in% input$countries)
} else {
data <- filtered_data %>% filter(country_name %in% input$countries)
}
return(data)
})
# Render Plotly plot for the main indicator
output$plot <- renderPlotly({
data_to_plot <- selected_data()
max_year <- max(data_to_plot$year, na.rm = TRUE)
last_year_data <- data_to_plot %>%
group_by(country_name) %>%
filter(year == max_year) %>%
ungroup() %>%
select(country_name, year, value)
title_text <- ifelse(input$indicator == "Wage bill as a percentage of GDP",
"Wage Bill as % of GDP Over Time",
"Wage Bill as % of Public Expenditure Over Time")
plot_mode <- ifelse(input$indicator == "Wage bill as a percentage of GDP", 'lines+markers', 'lines+markers')
plot <- plot_ly(data = data_to_plot,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = plot_mode,
marker = list(size = 8)) %>%
layout(title = title_text,
xaxis = list(title = "Year", dtick = 2),
yaxis = list(title = ifelse(input$indicator == "Wage bill as a percentage of GDP",
"Wage Bill (% of GDP)", "Wage Bill (%)")),
legend = list(title = list(text = "Country")))
for (i in 1:nrow(last_year_data)) {
plot <- plot %>%
add_annotations(
x = last_year_data$year[i],
y = last_year_data$value[i],
text = paste(round(last_year_data$value[i], 2)),
showarrow = FALSE,
font = list(size = 12, color = "black"),
bgcolor = "white",
xanchor = "center",
yanchor = "bottom"
)
}
plot
})
# First Graph (Multiple Countries)
output$firstGraph <- renderPlotly({
data_to_plot <- public_sector_emp_temp_last %>%
filter(country_name %in% input$countries_first)
data_to_plot_long <- data_to_plot %>%
select(country_name, indicator_name, year, value) %>%
mutate(indicator_name = factor(indicator_name))
plot <- plot_ly(data = data_to_plot_long,
x = ~country_name,
y = ~value,
color = ~indicator_name,
type = 'scatter',
mode = 'markers',
marker = list(size = 8)) %>%
layout(title = "Public sector employment as a share of",
xaxis = list(title = "Country", tickangle = 45),
yaxis = list(title = "Value"),
legend = list(title = list(text = "Indicator")))
plot
})
# Second Graph (Single Country)
output$secondGraph <- renderPlotly({
data_to_plot <- public_sector_emp_temp %>%
filter(country_name == input$country_second)  # Single country selection
data_to_plot_long <- data_to_plot %>%
select(year, indicator_name, value) %>%
mutate(indicator_name = factor(indicator_name))
plot <- plot_ly(
data = data_to_plot_long,
x = ~year,
y = ~value,
color = ~indicator_name,  # Color each indicator differently
text = ~paste("Value:", round(value, 2)),  # Tooltip with value
type = 'scatter',
mode = 'lines+markers',  # Add lines and markers
marker = list(size = 8)  # Set marker size
) %>%
layout(
title = paste("Public Sector Employment in", input$country_second, "Over Time"),
xaxis = list(title = "Year", tickangle = 45, dtick = 2),
yaxis = list(title = "Employment Value"),
legend = list(title = list(text = "Indicator"))
) %>%
add_annotations(
x = ~year,
y = ~value,  # Add offset to place annotation above the point
text = ~round(value, 2),  # Display value as annotation
showarrow = FALSE,  # Remove arrows
font = list(size = 12, color = "black"),
xanchor = "center",  # Center annotation horizontally
yanchor = "bottom"   # Position annotation above the point
)
plot
})
# Reactive expression to filter workforce data
filtered_workforce_data <- reactive({
req(input$countries_first) # Ensure input is not null
public_sector_workforce %>%
filter(country_name %in% input$countries_first) %>%
group_by(country_name, indicator_name) %>%
slice_max(order_by = year, n = 1) %>% # Get the latest year available for each country
ungroup()
})
# Render the stacked bar graph
output$stackedBarGraph <- renderPlotly({
data_to_plot <- filtered_workforce_data()
req(nrow(data_to_plot) > 0) # Ensure there's data to plot
plot_ly(
data = data_to_plot,
x = ~country_name,
y = ~value_percentage,
color = ~indicator_name,
type = "bar",
text = ~paste(
"Country:", country_name,
"<br>Indicator:", indicator_name,
"<br>Value:", round(value_percentage, 1), "%"
), # Detailed hover information
textposition = "auto",
colors = c(
"Public Administration workers, as a share of public total employees" = "#568340",
"Education workers, as a share of public total employees" = "#B3242B",
"Health workers, as a share of public total employees" = "#003366",
"Other" = "#A9A9A9" # Gray for "Other"
)
) %>%
layout(
barmode = "stack",
title = "Public Workforce Distribution by Country",
xaxis = list(title = "Country"),
yaxis = list(title = "Workforce Distribution (%)", range = c(0, 100)),
legend = list(title = list(text = "<b>Indicator</b>"))
)
})
# Second Graph: Horizontal Stacked Bar Chart (Single Country)
output$messageOutput <- renderUI({
# Filter data for the selected country
filtered_data <- public_sector_workforce %>%
filter(country_name == input$selected_country)
# Check if there is enough data
if (nrow(filtered_data) < 2) {
message <- "Not enough data available for this country to create the graph."
return(tags$p(message, style = "color: red; font-weight: bold;"))
}
return(NULL)
})
output$horizontalStackedBar <- renderPlotly({
req(input$selected_country)
# Filter data for the selected country
filtered_data <- public_sector_workforce %>%
filter(country_name == input$selected_country)
# Find the first and last year available for the selected country
first_year <- min(filtered_data$year, na.rm = TRUE)
last_year <- max(filtered_data$year, na.rm = TRUE)
# Filter data for the first and last year
data_to_plot <- filtered_data %>%
filter(year %in% c(first_year, last_year)) %>%
group_by(year, indicator_name) %>%
summarise(value_percentage = mean(value_percentage, na.rm = TRUE), .groups = "drop")
# Create the horizontal stacked bar chart
plot_ly(data = data_to_plot,
x = ~value_percentage,  # Horizontal bar
y = ~factor(year, levels = c(last_year, first_year)),  # Ensure correct order
color = ~indicator_name,
type = "bar",
orientation = "h",  # Horizontal orientation
text = ~paste0(round(value_percentage, 1), "%"),  # Add percentage as text
textposition = "inside",
colors = c(
"Public Administration workers, as a share of public total employees" = "#568340",
"Education workers, as a share of public total employees" = "#B3242B",
"Health workers, as a share of public total employees" = "#003366",
"Other" = "#A9A9A9"
)
) %>%
layout(
barmode = "stack",
title = paste("Sectoral Distribution of Public Sector Workforce in", input$selected_country,
"(", first_year, "&", last_year, ")"),
xaxis = list(title = "Percentage (%)"),
yaxis = list(title = "Year"),
legend = list(title = list(text = "Sector"))
)
})
#Gender Workforce
output$employment_plot <- renderPlotly({
# Filter data based on selected countries
filtered_data <- gender_workforce %>%
filter(country_name %in% input$countries_workforce)
#Last year available
public_latest <- filtered_data %>%
filter(indicator_name == "Females, as a share of public paid employees") %>%
group_by(country_name) %>%
filter(year == max(year, na.rm = TRUE)) %>%  # Keep only the most recent year
ungroup()
#Last year available
private_latest <- filtered_data %>%
filter(indicator_name == "Females, as a share of private paid employees") %>%
group_by(country_name) %>%
filter(year == max(year, na.rm = TRUE)) %>%  # Keep only the most recent year
ungroup()
# Create the plot
plot <- plot_ly(
data = public_latest,
x = ~country_name,
y = ~value_percentage,  # Use the percentage for the last year available
type = 'bar',
color = I("#003366"),  # Color for public sector
text = ~paste("Country: ", country_name,
"<br>Last year available: ", year,
"<br>Employment (%): ", round(value_percentage, 2)),  # Add detailed hover text
hoverinfo = "text",  # Show hover info
name = "Public Sector",
showlegend = TRUE
) %>%
add_trace(
data = private_latest,
x = ~country_name,
y = ~value_percentage,  # Use the percentage for the last year available
type = "scatter",
mode = "markers",
marker = list(size = 10, color = "#B3242B"),
name = "Private Sector",
text = ~paste("Country: ", country_name,
"<br>Last year available: ", year,
"<br>Employment (%): ", round(value_percentage, 2)),  # Add detailed hover text
hoverinfo = "text",  # Show hover info
showlegend = TRUE  # Show the legend
) %>%
layout(
barmode = "group",
title = "Female Employment by Sector (Last Year Available)",
xaxis = list(
title = "Country (Last Year Available)",
tickmode = 'array',
tickvals = public_latest$country_name,  # Explicitly set the tick values
ticktext = paste(public_latest$country_name,
"(", public_latest$year, ")")  # Append year to country names
),
yaxis = list(title = "Employment (%)"),
legend = list(title = list(text = "Sector"))
)
return(plot)
})
# Second Graph: Female Employment by Sector Over Time (Single Country)
output$employment_plot_overtime <- renderPlotly({
# Filter the data for the selected country
filtered_data <- gender_workforce %>%
filter(country_name == input$selected_country) # Ensure single country selection
# Define a custom color palette
custom_colors <- c("Females, as a share of private paid employees" = "#003366", "Females, as a share of public paid employees" = "#B3242B")
# Create the Plotly graph
plot <- filtered_data %>%
plot_ly(
x = ~year,
y = ~value_percentage,
color = ~indicator_name,
colors = custom_colors, # Apply custom colors
type = 'scatter',
mode = 'lines+markers',
hoverinfo = 'text',
text = ~paste(
"Country:", country_name,
"<br>Sector:", indicator_name,
"<br>Year:", year,
"<br>Female Employment:", value_percentage
)
) %>%
layout(
title = paste("Female Employment by Sector Over Time in", input$selected_country),
xaxis = list(title = "Year"),
yaxis = list(title = "Female Employment (%)"),
legend = list(title = list(text = "<b>Sector</b>")),
hovermode = "closest"
)
plot
})
# Define the initial world map render
output$worldMap <- renderLeaflet({
leaflet(world_spdf) %>%
addTiles() %>%
setView(lng = 0, lat = 20, zoom = 2)  # Adjust view to show the world
})
# Reactive expression to filter data based on selected countries
filtered_workforce_data <- reactive({
req(input$countries_workforce)  # Ensure countries are selected
public_sector_workforce %>%
filter(country_name %in% input$countries_workforce) %>%
group_by(country_name, indicator_name) %>%
summarise(value_percentage = mean(value_percentage, na.rm = TRUE), .groups = "drop")
})
# Update the map based on indicator selection
observe({
req(input$indicatorSelect)
# Filter the dataset to get countries that reported data
reported_countries <- data_wwbi %>%
filter(!is.na(.data[[paste0("year_", 2022)]])) %>%
pull(country_name)
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(
data = world_spdf,
fillColor = ~ifelse(world_spdf$country_name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
output$variableTable <- renderDT({
data_wwbi %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])"))
})
# Render Data Table of variables
output$variableTable <- renderDT({
data_wwbi %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])"))
})
# Dummy outputs for widgets
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 100, icon = icon("list"), color = "blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Countries", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "blue")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "blue")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "blue")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "blue")
})
}
shinyApp(ui = ui, server = server)
