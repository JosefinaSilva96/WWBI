# Define Colors
custom_colors <- c("Individuals with tertiary education as a share of private paid employees" = "#B3242B",
"Individuals with tertiary education as a share of public paid employees" = "#003366")
# Generate Bar Plot
plot <- filtered_data %>%
plot_ly(x = ~country_name, y = ~value_percentage,
color = ~indicator_name, colors = custom_colors,
type = 'bar', barmode = 'group', text = ~paste0(round(value_percentage, 1), "%"),
textposition = "auto") %>%
layout(title = "Tertiary Education by Sector and Country",
xaxis = list(title = "Country"),
yaxis = list(title = "Tertiary Education (%)"),
legend = list(title = list(text = "<b>Sector</b>")))
plot
})
output$downloadGraphsWordEducation <- downloadHandler(
filename = function() { paste0("Tertiary_Education_Report_", Sys.Date(), ".docx") },
content = function(file) {
# Create Word Document
doc <- read_docx()
# Title Style
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext("Tertiary Education Analysis", prop = title_style)))
# Introduction
doc <- doc %>% body_add_par("This report presents an analysis of tertiary education among public and private sector employees across selected countries.", style = "Normal")
# Save Bar Plot as an Image
filtered_data <- tertiary_education %>%
filter(country_name %in% input$selected_countries)
ggplot_obj <- ggplot(filtered_data, aes(x = country_name, y = value_percentage, fill = indicator_name)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Individuals with tertiary education as a share of private paid employees" = "#B3242B",
"Individuals with tertiary education as a share of public paid employees" = "#003366")) +
labs(title = "Tertiary Education by Sector and Country", x = "Country", y = "Tertiary Education (%)") +
theme_minimal()
img_path <- tempfile(fileext = ".png")
ggsave(img_path, plot = ggplot_obj, width = 8, height = 6)
# Add Image to Word
doc <- doc %>% body_add_img(src = img_path, width = 6, height = 4)
# Save the Word Document
print(doc, target = file)
}
)
#Public Sector Wage Premium
# Render the Dot Plot for Public Sector Wage Premium
output$dotPlot <- renderPlotly({
req(input$countries_wage_premium)
# Filter dataset & select only relevant columns
filtered_data <- public_wage_premium %>%
filter(country_name %in% input$countries_wage_premium) %>%
select(country_name, value_percentage) %>%
drop_na(value_percentage)  # Remove any NA values
# Check if there's data after filtering
if (nrow(filtered_data) == 0) {
return(NULL)  # Prevents errors when no data is available
}
# Assign colors: First country -> Red, Others -> Dark Blue
filtered_data <- filtered_data %>%
mutate(color = ifelse(country_name == input$countries_wage_premium[1], "#B3242B", "#003366"))
# Generate Dot Plot
plot <- plot_ly(
data = filtered_data,
x = ~country_name,
y = ~value_percentage,
type = "scatter",
mode = "markers",
marker = list(size = 10, opacity = 0.8),
color = ~color,  # Assign color dynamically
colors = c("#B3242B", "#003366"),  # Red & Dark Blue
text = ~paste0("Country: ", country_name, "<br>Wage Premium: ", round(value_percentage, 1), "%"),
hoverinfo = "text"
) %>%
layout(
title = "Public Sector Wage Premium (Compared to All Private Employees) by Country",
xaxis = list(title = "Country"),
yaxis = list(title = "Public Sector Wage Premium (%)"),
showlegend = FALSE
)
plot
})
# Download the Report as a Word Document
output$downloadWagePremiumReport <- downloadHandler(
filename = function() { paste0("Public_Sector_Wage_Premium_", Sys.Date(), ".docx") },
content = function(file) {
# Create Word Document
doc <- read_docx()
# Define Title Style
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext("Public Sector Wage Premium Analysis", prop = title_style)))
# Introduction
doc <- doc %>% body_add_par("This report presents an analysis of public sector wage premium compared to all private sector employees across selected countries.", style = "Normal")
# Filter Data for Selected Countries
filtered_data <- public_wage_premium %>%
filter(country_name %in% input$countries_wage_premium) %>%
drop_na(value_percentage)  # Remove NA values
# Ensure the data exists
if (nrow(filtered_data) == 0) {
doc <- doc %>% body_add_par("No data available for the selected countries.", style = "Normal")
print(doc, target = file)
return()
}
# Convert value_percentage to numeric (just in case)
filtered_data$value_percentage <- as.numeric(filtered_data$value_percentage)
# Assign Colors: First Selected Country = Red, Others = Dark Blue
filtered_data <- filtered_data %>%
mutate(color = ifelse(country_name == input$countries_wage_premium[1], "#B3242B", "#003366"))
# Create the Dot Plot with Different Colors
ggplot_obj <- ggplot(filtered_data, aes(x = country_name, y = value_percentage, color = color)) +
geom_point(size = 5) +
scale_color_identity() +  # Use assigned colors directly
labs(title = "Public Sector Wage Premium by Country", x = "Country", y = "Wage Premium (%)") +
theme_minimal()
# Save Dot Plot as Image
img_path <- tempfile(fileext = ".png")
ggsave(img_path, plot = ggplot_obj, width = 8, height = 6)
# Add Image to Word Document
doc <- doc %>% body_add_img(src = img_path, width = 6, height = 4)
# Save the Word Document
print(doc, target = file)
}
)
output$employment_plot <- renderPlotly({
filtered_data <- gender_workforce %>% filter(country_name %in% input$countries_workforce)
if(nrow(filtered_data) == 0) return(NULL)
public_latest <- filtered_data %>% filter(indicator_name == "Females, as a share of public paid employees") %>%
group_by(country_name) %>% filter(year == max(year, na.rm = TRUE)) %>% ungroup()
private_latest <- filtered_data %>% filter(indicator_name == "Females, as a share of private paid employees") %>%
group_by(country_name) %>% filter(year == max(year, na.rm = TRUE)) %>% ungroup()
if(nrow(public_latest) == 0 || nrow(private_latest) == 0) return(NULL)
plot <- plot_ly(data = public_latest,
x = ~country_name,
y = ~value_percentage,
type = 'bar',
color = I("#003366"),
text = ~paste("Country: ", country_name, "<br>Last year available: ", year, "<br>Employment (%): ", round(value_percentage, 2)),
hoverinfo = "text",
name = "Public Sector",
showlegend = TRUE) %>%
add_trace(data = private_latest,
x = ~country_name,
y = ~value_percentage,
type = "scatter",
mode = "markers",
marker = list(size = 10, color = "#B3242B"),
name = "Private Sector",
text = ~paste("Country: ", country_name, "<br>Last year available: ", year, "<br>Employment (%): ", round(value_percentage, 2)),
hoverinfo = "text",
showlegend = TRUE) %>%
layout(barmode = "group",
title = "Female Employment by Sector (Last Year Available)",
xaxis = list(title = "Country (Last Year Available)",
tickmode = 'array',
tickvals = public_latest$country_name,
ticktext = paste(public_latest$country_name, "(", public_latest$year, ")")),
yaxis = list(title = "Employment (%)"),
legend = list(title = list(text = "Sector")))
plot
})
output$employment_plot_overtime <- renderPlotly({
filtered_data <- gender_workforce %>% filter(country_name == input$selected_country)
if(nrow(filtered_data) == 0) return(NULL)
custom_colors <- c("Females, as a share of private paid employees" = "#003366",
"Females, as a share of public paid employees" = "#B3242B")
plot <- filtered_data %>% plot_ly(x = ~year,
y = ~value_percentage,
color = ~indicator_name,
colors = custom_colors,
type = 'scatter',
mode = 'lines+markers',
hoverinfo = 'text',
text = ~paste("Country:", country_name, "<br>Sector:", indicator_name, "<br>Year:", year, "<br>Female Employment:", value_percentage)) %>%
layout(title = paste("Female Employment by Sector Over Time in", input$selected_country),
xaxis = list(title = "Year"),
yaxis = list(title = "Female Employment (%)"),
legend = list(title = list(text = "<b>Sector</b>")),
hovermode = "closest")
plot <- plot %>% add_annotations(x = data_to_plot_long$year,
y = data_to_plot_long$value,
text = round(data_to_plot_long$value, 2),
showarrow = FALSE,
font = list(size = 12, color = "black"),
xanchor = "center",
yanchor = "bottom")
plot
})
output$downloadGraphsWordworkforce <- downloadHandler(
filename = function() { paste0("Wage_Premium_Gender_Graphs_", Sys.Date(), ".docx") },
content = function(file) {
print(input$countries_first)
print(input$country_second)
countries <- ifelse(!is.null(input$countries_first) && length(input$countries_first) > 0, input$countries_first[1], "Unknown Country")
report_title <- paste("Wage Premium Gender Analysis Report -", countries)
doc <- read_docx()
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext(report_title, prop = title_style)))
doc <- doc %>% body_add_par("Introduction", style = "heading 2") %>%
body_add_par("This report presents evidence on public sector employment and compensation practices for the selected countries.", style = "Normal")
if("firstGraphgender" %in% input$graphs_to_download && length(input$countries_first) > 0) {
data_to_plot <- gender_wage_premium_last %>% filter(country_name %in% input$countries_first)
data_to_plot_long <- data_to_plot %>% select(country_name, indicator_label, year, value) %>%
mutate(indicator_label = factor(indicator_label))
first_graph_wage_premium_gender <- ggplot(data_to_plot_long, aes(x = country_name, y = value, color = indicator_label)) +
geom_point(size = 3) +
labs(title = "Wage Premium Gender (Multi-Country)", x = "Country", y = "Value") +
theme_minimal()
graph_path1 <- "C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI/first_graph_wage_premium_gender.png"
ggsave(graph_path1, plot = first_graph_wage_premium_gender, width = 6, height = 4)
doc <- doc %>% body_add_par("First Graph: Wage Premium Gender (Multi-Country)", style = "heading 1") %>%
body_add_img(src = graph_path1, width = 6, height = 4) %>%
body_add_par("This graph shows the wage premium by gender across multiple countries.", style = "Normal")
}
if("secondGraphgender" %in% input$graphs_to_download && !is.null(input$country_second)) {
data_to_plot <- gender_wage_premium %>% filter(country_name == input$country_second)
data_to_plot_long <- data_to_plot %>% select(year, indicator_name, value) %>%
mutate(indicator_name = factor(indicator_name))
second_graph_wage_premium_gender <- ggplot(data_to_plot_long, aes(x = year, y = value, color = indicator_name)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = paste("Public sector wage premium, by gender in", input$country_second, "Over Time"), x = "Year", y = "Employment Value") +
theme_minimal()
graph_path2 <- "C:/Users/wb631166/OneDrive - WBG/Desktop/Bureaucracy Lab/WWBI/second_graph_wage_premium_gender.png"
ggsave(graph_path2, plot = second_graph_wage_premium_gender, width = 6, height = 4)
doc <- doc %>% body_add_par("Second Graph: Public Sector Employment (Single Country)", style = "heading 1") %>%
body_add_img(src = graph_path2, width = 6, height = 4) %>%
body_add_par("This graph shows the wage premium by gender trends over time for the selected country.", style = "Normal")
}
print(doc, target = file)
}
)
# Wage premium by Education Level
# Render the Public Sector Wage Premium by Education Level Graph
output$education_wage_premium_plot <- renderPlotly({
req(input$selected_country)  # Ensure a country is selected
# Filter the dataset for the selected country
filtered_data <- public_wage_premium_educ %>%
filter(country_name == input$selected_country) %>%
drop_na(value_percentage)  # Remove NAs
# Ensure data exists
if (nrow(filtered_data) == 0) {
return(NULL)
}
# Define custom colors for education levels
education_colors <- c(
"No Education" = "#003366",       # Dark Blue
"Primary Education" = "#B3242B",  # Dark Red
"Secondary Education" = "#3B3B3B",# Dark Gray/Black
"Tertiary Education" = "#006400"  # Dark Green
)
# Create the bar plot
p <- ggplot(filtered_data, aes(x = indicator_name, y = value_percentage, fill = indicator_name)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = education_colors) +
labs(
title = "Public Sector Wage Premium by Education Level (Compared to Private Formal Workers)",
x = "Education Level",
y = "Wage Premium (%)"
) +
theme_minimal()
ggplotly(p)  # Convert ggplot to Plotly for interactivity
})
# -----------------------------------
# 📄 Download Handler for Word Report
# -----------------------------------
output$downloadEducationWagePremium <- downloadHandler(
filename = function() {
paste0("Public_Sector_Wage_Premium_Education_", Sys.Date(), ".docx")
},
content = function(file) {
# Create Word Document
doc <- read_docx()
# Define Title Style
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext("Public Sector Wage Premium by Education Level", prop = title_style)))
# Add Introduction
doc <- doc %>% body_add_par(
paste0("This report presents an analysis of public sector wage premiums based on different education levels for ",
input$selected_country, ". The comparison is made against private sector formal workers."),
style = "Normal"
)
# Filter Data
filtered_data <- public_wage_premium_educ %>%
filter(country_name == input$selected_country) %>%
drop_na(value_percentage)
# Ensure data exists
if (nrow(filtered_data) == 0) {
doc <- doc %>% body_add_par("No data available for the selected country.", style = "Normal")
print(doc, target = file)
return()
}
# Save Bar Plot as Image
img_path <- tempfile(fileext = ".png")
ggplot_obj <- ggplot(filtered_data, aes(x = indicator_name, y = value_percentage, fill = indicator_name)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c(
"No Education" = "#003366",
"Primary Education" = "#B3242B",
"Secondary Education" = "#3B3B3B",
"Tertiary Education" = "#006400"
)) +
labs(
title = "Public Sector Wage Premium by Education Level (Compared to Private Formal Workers)",
x = "Education Level",
y = "Wage Premium (%)"
) +
theme_minimal()
ggsave(img_path, plot = ggplot_obj, width = 8, height = 6)
# Add Image to Word Document
doc <- doc %>% body_add_img(src = img_path, width = 6, height = 4)
# Save the Word Document
print(doc, target = file)
}
)
#Public Sector Graphs
# First Graph - Multi-Country Dot Plot
output$firstGraphpublic <- renderPlotly({
filtered_data <- public_sector_emp_temp_last %>%
filter(country_name %in% input$countries_first)
ggplotly(
ggplot(filtered_data, aes(x = country_name, y = value, color = indicator_name)) +
geom_point(size = 4) +
labs(title = "Public Sector Employment (Last Year Available)", x = "Country", y = "Value") +
theme_minimal()
)
})
# Second Graph - Single-Country Line Plot
output$secondGraphpublic <- renderPlotly({
filtered_data <- public_sector_emp_temp %>%
filter(country_name == input$country_second)
ggplotly(
ggplot(filtered_data, aes(x = year, y = value, color = indicator_name)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Public Sector Employment Over Time", x = "Year", y = "Value") +
theme_minimal()
)
})
# Download Handler - Save Graphs to Word Document
output$downloadGraphsWord <- downloadHandler(
filename = function() {
paste0("Public_Sector_Employment_", Sys.Date(), ".docx")
},
content = function(file) {
doc <- read_docx()
# Title
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext("Public Sector Employment Analysis", prop = title_style)))
# Intro Text
doc <- doc %>% body_add_par("This report presents the analysis of public sector employment across selected countries and its trend over time.", style = "Normal")
# First Graph - Save as Image
first_graph <- ggplot(public_sector_emp_temp_last %>% filter(country_name %in% input$countries_first),
aes(x = country_name, y = value, color = indicator_name)) +
geom_point(size = 4) +
labs(title = "Public Sector Employment (Last Year Available)", x = "Country", y = "Value") +
theme_minimal()
img_path1 <- tempfile(fileext = ".png")
ggsave(img_path1, plot = first_graph, width = 8, height = 6)
doc <- doc %>% body_add_par("Public Sector Employment - Last Year Available", style = "heading 2")
doc <- doc %>% body_add_img(src = img_path1, width = 6, height = 4)
# Second Graph - Save as Image
second_graph <- ggplot(public_sector_emp_temp %>% filter(country_name == input$country_second),
aes(x = year, y = value, color = indicator_name)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = "Public Sector Employment Over Time", x = "Year", y = "Value") +
theme_minimal()
img_path2 <- tempfile(fileext = ".png")
ggsave(img_path2, plot = second_graph, width = 8, height = 6)
doc <- doc %>% body_add_par("Public Sector Employment Over Time", style = "heading 2")
doc <- doc %>% body_add_img(src = img_path2, width = 6, height = 4)
# Save the Document
print(doc, target = file)
}
)
# Women Leadership
output$barPlotwomen <- renderPlotly({
if (is.null(input$selected_countries) || length(input$selected_countries) == 0) return(NULL)
filtered_data <- gender_leadership %>% filter(country_name %in% input$selected_countries)
if (nrow(filtered_data) == 0) return(NULL)
plot_ly(data = filtered_data,
x = ~country_name,
y = ~value_percentage,
color = ~indicator_label,
colors = c("Clerks-Public" = "#003366", "Managers-Public" = "#ADD8E6",
"Clerks-Private" = "#006400", "Managers-Private" = "#90EE90"),
type = 'bar',
barmode = 'group') %>%
layout(title = "Females by Occupational Group and Sector",
xaxis = list(title = "Country"),
yaxis = list(title = "Female Share (%)"),
bargap = 0.2)
})
output$downloadGraphsWordfemale <- downloadHandler(
filename = function() { paste0("Females_Occupation_Groups_Analysis_", Sys.Date(), ".docx") },
content = function(file) {
# Create Word Document
doc <- read_docx()
# Title Style
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext("Females by Occupational Group and Sector", prop = title_style)))
# Introduction
doc <- doc %>% body_add_par("This report presents an analysis of female representation in different occupational groups across selected countries.", style = "Normal")
# Filter Data
filtered_data <- gender_leadership %>% filter(country_name %in% input$selected_countries)
if(nrow(filtered_data) == 0) return(NULL)  # Ensure there's data to plot
# Generate Plotly Bar Chart
bar_plot <- plot_ly(data = filtered_data,
x = ~country_name,
y = ~value_percentage,
color = ~indicator_label,
colors = c("Clerks-Public" = "#003366", "Managers-Public" = "#ADD8E6",
"Clerks-Private" = "#006400", "Managers-Private" = "#90EE90"),
type = 'bar',
barmode = 'group') %>%
layout(title = "Females by Occupational Group and Sector",
xaxis = list(title = "Country"),
yaxis = list(title = "Female Share (%)"),
bargap = 0.2)
# Save Plotly Chart as Image Using
img_path <- tempfile(fileext = ".png")
ggsave(bar_plot, file = img_path)  # Instead of ggsave()
# Add Image to Word
doc <- doc %>%
body_add_img(src = img_path, width = 6, height = 4) %>%
body_add_par("This graph shows the share of females in various occupational groups (Managers/Clerks) in the public and private sectors for the selected countries.", style = "Normal")
# Save the Word Document
print(doc, target = file)
}
)
output$downloadAllGraphsDoc <- downloadHandler(
filename = function() { paste0("Comprehensive_Wage_Bill_Report_", Sys.Date(), ".docx") },
content = function(file) {
report_title <- "Wage Bill and Public Employment Analysis Report"
doc <- read_docx()
title_style <- fp_text(color = "#722F37", font.size = 16, bold = TRUE)
doc <- doc %>% body_add_fpar(fpar(ftext(report_title, prop = title_style)))
doc <- doc %>% body_add_par("Introduction", style = "heading 2") %>%
body_add_par("This note presents evidence on public sector employment and compensation practices...", style = "Normal")
graph1 <- ggplot(selected_data(), aes(x = year, y = value, color = country_name)) +
geom_line() +
labs(title = "Wage Bill as % of GDP Over Time", x = "Year", y = "Wage Bill (% of GDP)") +
theme_minimal()
doc <- doc %>% body_add_gg(graph1, style = "centered")
graph2 <- ggplot(selected_data(), aes(x = year, y = value, color = country_name)) +
geom_line() +
labs(title = "Wage Bill as % of Public Expenditure Over Time", x = "Year", y = "Wage Bill (% of Public Expenditure)") +
theme_minimal()
doc <- doc %>% body_add_gg(graph2, style = "centered")
dot_plot <- ggplot(filtered_data(), aes(x = log_gdp, y = indicator_value, color = country_name)) +
geom_point(size = 3) +
geom_smooth(method = "lm", color = "gray", linetype = "dashed") +
labs(title = "Wage Bill vs. Log(GDP per Capita)", x = "Log(GDP per Capita, 2015)", y = "Wage Bill") +
theme_minimal()
doc <- doc %>% body_add_gg(dot_plot, style = "centered")
print(doc, target = file)
}
)
output$worldMap <- renderLeaflet({
data_values <- filtered_data_for_map()
color_pal <- colorNumeric("Greens", domain = c(min(data_values$value_percentage, na.rm = TRUE),
max(data_values$value_percentage, na.rm = TRUE)))
leaflet(world_spdf) %>% addTiles() %>% setView(lng = 0, lat = 20, zoom = 2) %>%
addLegend(position = "bottomright", pal = color_pal,
values = c(min(data_values$value_percentage, na.rm = TRUE),
max(data_values$value_percentage, na.rm = TRUE)),
title = "Indicator Value", opacity = 1)
})
filtered_data_for_map <- reactive({
req(input$indicatorSelect, input$yearSelect)
data_wwbi %>% filter(indicator_name == input$indicatorSelect,
!is.na(.data[[paste0("year_", input$yearSelect)]])) %>%
transmute(country_name, indicator_name, value_percentage = .data[[paste0("year_", input$yearSelect)]])
})
observe({
req(input$indicatorSelect, input$yearSelect)
reported_countries <- filtered_data_for_map()
if(is.null(reported_countries) || nrow(reported_countries) == 0) return()
world_data_merged <- world_spdf %>% left_join(reported_countries, by = "country_name")
color_pal <- colorNumeric("Greens", domain = c(min(reported_countries$value_percentage, na.rm = TRUE),
max(reported_countries$value_percentage, na.rm = TRUE)))
leafletProxy("worldMap") %>% clearShapes() %>%
addPolygons(data = world_data_merged,
fillColor = ~ifelse(is.na(value_percentage), "#808080", color_pal(value_percentage)),
fillOpacity = 0.7,
color = "white",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~paste0("<strong>Country:</strong> ", country_name, "<br>",
ifelse(!is.na(value_percentage), paste0("<strong>Value:</strong> ", round(value_percentage, 2)), "<strong>No Data</strong>")),
popup = ~paste("Country:", country_name, "<br>Indicator:", indicator_name,
ifelse(!is.na(value_percentage), paste("<br>Value:", round(value_percentage, 2)), "<br>No Data Available"))
)
output$countryCount <- renderText({
paste("Total Countries with Data:", nrow(reported_countries))
})
})
# Change infoBox colors to "purple" to match the quartz theme
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 302, icon = icon("list"), color = "purple")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Economies", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "purple")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "purple")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "purple")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "purple")
})
}
shinyApp(ui = ui, server = server)
