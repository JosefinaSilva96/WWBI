tabItem(tabName = "indicators",
fluidRow(
box(title = "Indicator Status Across Countries", status = "primary", solidHeader = TRUE, width = 12,
"This map shows which countries have reported data for the selected indicator."
),
box(title = "Select Indicator", status = "primary", solidHeader = TRUE, width = 12,
selectInput("indicatorSelect", "Choose Indicator",
choices = c("Gender", "Education Level", "Age", "Labor Status", "Wage", "Industry"))
),
box(title = "World Map", status = "primary", solidHeader = TRUE, width = 12,
leafletOutput("worldMap", height = 500)
)
)
)
)
)
)
# Define Server ----
server <- function(input, output, session) {
# Render plot with filtered data based on indicator and selected countries
output$linePlot <- renderPlotly({
req(input$indicator, input$countrySelect)
# Select and filter data for years 2010 to 2022
selected_data_long <- data_wwbi %>%
filter(indicator_name == input$indicator,
country_name %in% input$countrySelect) %>%
select(country_name, matches("^year_20(1[0-9]|2[0-2])")) %>%
pivot_longer(cols = matches("^year_"),
names_to = "year",
values_to = "value") %>%
mutate(year = as.numeric(sub("year_", "", year)))
# Plot with 5-year skips on the x-axis
plot_ly(selected_data_long,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Indicator Trend Over Time:", input$indicator),
xaxis = list(title = "Year", dtick = 5), # 5-year skips
yaxis = list(title = input$indicator),
legend = list(title = list(text = "Country")))
})
# Update world map based on selected indicator
observe({
req(input$indicatorSelect)
# Filter countries with reported data for the selected indicator
reported_countries <- data_wwbi[!is.na(data_wwbi[[paste0("year_", 2022)]]), "country_name"]
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
# Render Data Table
output$variableTable <- renderDT({
data_wwbi %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])"))
})
}
# Run the app
shinyApp(ui, server)
# Define UI ----
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "WWB Indicators"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Variable List", tabName = "variableList", icon = icon("table")),
menuItem("Graphs", tabName = "graphs", icon = icon("chart-line")),
menuItem("Indicators Status", tabName = "indicators", icon = icon("globe"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
box(title = "Dashboard Description", status = "primary", solidHeader = TRUE, width = 12,
"Welcome to the World Bank Indicators Dashboard!")
)
),
tabItem(tabName = "widgets",
fluidRow(
infoBoxOutput("numberIndicatorsBox", width = 6),
infoBoxOutput("numberCountriesBox", width = 6),
infoBoxOutput("temporalCoverageAnnualBox", width = 6),
infoBoxOutput("temporalCoverageYearsBox", width = 6),
infoBoxOutput("lastUpdatedBox", width = 6)
)
),
tabItem(tabName = "variableList",
fluidRow(
box(title = "Year Filter", status = "primary", solidHeader = TRUE, width = 3,
selectInput("yearFilter", "Select Year",
choices = paste0("year_", 2000:2022), selected = "year_2022", multiple = TRUE)
),
box(title = "Available Variables", status = "primary", solidHeader = TRUE, width = 12,
DTOutput("variableTable")
)
)
),
tabItem(tabName = "graphs",
fluidRow(
box(selectInput("indicator", "Select a WWB Indicator",
choices = c("Wage bill (as % of public expenditure) over time",
"Public sector employment",
"Gender distribution in the public sector workforce")),
title = "Worldwide Bureaucracy Indicators", status = "primary", solidHeader = TRUE, width = 4),
box(selectizeInput("countrySelect", "Select Countries",
choices = countries, multiple = TRUE, selected = countries[1:3]),
width = 4)
),
fluidRow(
box(title = "Indicator Trend Over Time", status = "primary", solidHeader = TRUE, width = 12,
plotlyOutput("linePlot", height = "500px")
)
)
),
tabItem(tabName = "indicators",
fluidRow(
box(title = "Indicator Status Across Countries", status = "primary", solidHeader = TRUE, width = 12,
"This map shows which countries have reported data for the selected indicator."
),
box(title = "Select Indicator", status = "primary", solidHeader = TRUE, width = 12,
selectInput("indicatorSelect", "Choose Indicator",
choices = c("Gender", "Education Level", "Age", "Labor Status", "Wage", "Industry"))
),
box(title = "World Map", status = "primary", solidHeader = TRUE, width = 12,
leafletOutput("worldMap", height = 500)
)
)
)
)
)
)
# Define Server ----
server <- function(input, output, session) {
# Render plot with filtered data based on indicator and selected countries
output$linePlot <- renderPlotly({
req(input$indicator, input$countrySelect)
# Select and filter data for years 2010 to 2022, removing rows with NA values
selected_data_long <- data_wwbi %>%
filter(indicator_name == input$indicator,
country_name %in% input$countrySelect) %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])")) %>%
pivot_longer(cols = matches("^year_"),
names_to = "year",
values_to = "value") %>%
mutate(year = as.numeric(sub("year_", "", year))) %>%
drop_na(value)
# Plot with 5-year skips on the x-axis
plot_ly(selected_data_long,
x = ~year,
y = ~value,
color = ~country_name,
type = 'scatter',
mode = 'lines+markers',
line = list(width = 2),
marker = list(size = 6)) %>%
layout(title = paste("Indicator Trend Over Time:", input$indicator),
xaxis = list(title = "Year", dtick = 5), # 5-year skips
yaxis = list(title = input$indicator),
legend = list(title = list(text = "Country")))
})
# Update world map based on selected indicator
observe({
req(input$indicatorSelect)
# Filter countries with reported data for the selected indicator
reported_countries <- data_wwbi %>%
filter(!is.na(.data[[paste0("year_", 2022)]])) %>%
pull(country_name)
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
# Render Data Table
output$variableTable <- renderDT({
data_wwbi %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])"))
})
# Dummy outputs for widgets to prevent errors (define actual values in your code)
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 100, icon = icon("list"), color = "blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Countries", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "green")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "purple")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "yellow")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "red")
})
}
# Run the app
shinyApp(ui, server)
# Sample data
data <- data.frame(
country = c("BGD", "IND", "PAK", "IDN", "EGY", "PHL"),
year = rep(2010:2022, 6),
value = c(14.3, 12.4, 18.1, 3.7, 25.4, 28.3,
13.2, 13.6, 19.9, 3.6, 25.8, 27.8,
13.6, 12.8, 18.5, 3.7, 25.1, 26.6,
13.9, 12.1, 18.3, 3.6, 26.4, 25.1,
14.2, 12.3, 18.6, 3.5, 27.1, 25.8,
14.8, 12.1, 17.9, 3.8, 28.2, 26.4)
)
# Define Server ----
server <- function(input, output, session) {
# Render plot with filtered data based on indicator and selected countries
output$linePlot <- renderPlotly({
req(input$indicator, input$countrySelect)
# Select and filter data for years 2010 to 2022, removing rows with NA values
selected_data_long <- data_wwbi %>%
filter(indicator_name == input$indicator,
country_name %in% input$countrySelect) %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])")) %>%
pivot_longer(cols = matches("^year_"),
names_to = "year",
values_to = "value") %>%
mutate(year = as.numeric(sub("year_", "", year))) %>%
drop_na(value)
# Plot with 5-year skips on the x-axis
plot_ly(filtered_data(), x = ~year, y = ~value, color = ~country, type = 'scatter', mode = 'lines+markers') %>%
layout(title = 'Country Trend Over Time',
xaxis_title = 'Year',
yaxis_title = 'Value',
legend_title_text = 'Country')
})
# Update world map based on selected indicator
observe({
req(input$indicatorSelect)
# Filter countries with reported data for the selected indicator
reported_countries <- data_wwbi %>%
filter(!is.na(.data[[paste0("year_", 2022)]])) %>%
pull(country_name)
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
# Render Data Table
output$variableTable <- renderDT({
data_wwbi %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])"))
})
# Dummy outputs for widgets to prevent errors (define actual values in your code)
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 100, icon = icon("list"), color = "blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Countries", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "green")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "purple")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "yellow")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "red")
})
}
# Run the app
shinyApp(ui, server)
server <- function(input, output, session) {
# Define Server ----
server <- function(input, output, session) {
# Render plot with filtered data based on indicator and selected countries
output$linePlot <- renderPlotly({
req(input$indicator, input$countrySelect)
# Select and filter data for years 2010 to 2022, removing rows with NA values
selected_data_long <- data_wwbi %>%
filter(indicator_name == input$indicator,
country_name %in% input$countrySelect) %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])")) %>%
pivot_longer(cols = matches("^year_"),
names_to = "year",
values_to = "value") %>%
mutate(year = as.numeric(sub("year_", "", year))) %>%
drop_na(value)
# Plot with 5-year skips on the x-axis
plot_ly(selected_data_long(), x = ~year, y = ~value, color = ~country, type = 'scatter', mode = 'lines+markers') %>%
layout(title = 'Country Trend Over Time',
xaxis_title = 'Year',
yaxis_title = 'Value',
legend_title_text = 'Country')
})
# Update world map based on selected indicator
observe({
req(input$indicatorSelect)
# Filter countries with reported data for the selected indicator
reported_countries <- data_wwbi %>%
filter(!is.na(.data[[paste0("year_", 2022)]])) %>%
pull(country_name)
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
# Render Data Table
output$variableTable <- renderDT({
data_wwbi %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])"))
})
# Dummy outputs for widgets to prevent errors (define actual values in your code)
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 100, icon = icon("list"), color = "blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Countries", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "green")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "purple")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "yellow")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "red")
})
}
# Run the app
shinyApp(ui, server)
# Define UI ----
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "WWB Indicators"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Variable List", tabName = "variableList", icon = icon("table")),
menuItem("Graphs", tabName = "graphs", icon = icon("chart-line")),
menuItem("Indicators Status", tabName = "indicators", icon = icon("globe"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
box(title = "Dashboard Description", status = "primary", solidHeader = TRUE, width = 12,
"Welcome to the World Bank Indicators Dashboard!")
)
),
tabItem(tabName = "widgets",
fluidRow(
infoBoxOutput("numberIndicatorsBox", width = 6),
infoBoxOutput("numberCountriesBox", width = 6),
infoBoxOutput("temporalCoverageAnnualBox", width = 6),
infoBoxOutput("temporalCoverageYearsBox", width = 6),
infoBoxOutput("lastUpdatedBox", width = 6)
)
),
tabItem(tabName = "variableList",
fluidRow(
box(title = "Year Filter", status = "primary", solidHeader = TRUE, width = 3,
selectInput("yearFilter", "Select Year",
choices = paste0("year_", 2000:2022), selected = "year_2022", multiple = TRUE)
),
box(title = "Available Variables", status = "primary", solidHeader = TRUE, width = 12,
DTOutput("variableTable")
)
)
),
tabItem(tabName = "graphs",
fluidRow(
box(selectInput("indicator", "Select a WWB Indicator",
choices = c("Wage bill (as % of public expenditure) over time",
"Public sector employment",
"Gender distribution in the public sector workforce")),
title = "Worldwide Bureaucracy Indicators", status = "primary", solidHeader = TRUE, width = 4),
box(selectizeInput("countrySelect", "Select Countries",
choices = countries, multiple = TRUE, selected = countries[1:3]),
width = 4)
),
fluidRow(
box(title = "Indicator Trend Over Time", status = "primary", solidHeader = TRUE, width = 12,
plotlyOutput("linePlot", height = "500px")
)
)
),
tabItem(tabName = "indicators",
fluidRow(
box(title = "Indicator Status Across Countries", status = "primary", solidHeader = TRUE, width = 12,
"This map shows which countries have reported data for the selected indicator."
),
box(title = "Select Indicator", status = "primary", solidHeader = TRUE, width = 12,
selectInput("indicatorSelect", "Choose Indicator",
choices = c("Gender", "Education Level", "Age", "Labor Status", "Wage", "Industry"))
),
box(title = "World Map", status = "primary", solidHeader = TRUE, width = 12,
leafletOutput("worldMap", height = 500)
)
)
)
)
)
)
# Define Server ----
server <- function(input, output, session) {
# Render plot with filtered data based on indicator and selected countries
output$linePlot <- renderPlotly({
req(input$indicator, input$countrySelect)
# Select and filter data for years 2010 to 2022, removing rows with NA values
selected_data_long <- data_wwbi %>%
filter(indicator_name == input$indicator,
country_name %in% input$countrySelect) %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])")) %>%
pivot_longer(cols = matches("^year_"),
names_to = "year",
values_to = "value") %>%
mutate(year = as.numeric(sub("year_", "", year))) %>%
drop_na(value)
# Plot with 5-year skips on the x-axis
plot_ly(selected_data_long(), x = ~year, y = ~value, color = ~country, type = 'scatter', mode = 'lines+markers') %>%
layout(title = 'Country Trend Over Time',
xaxis_title = 'Year',
yaxis_title = 'Value',
legend_title_text = 'Country')
})
# Update world map based on selected indicator
observe({
req(input$indicatorSelect)
# Filter countries with reported data for the selected indicator
reported_countries <- data_wwbi %>%
filter(!is.na(.data[[paste0("year_", 2022)]])) %>%
pull(country_name)
leafletProxy("worldMap") %>%
clearShapes() %>%
addPolygons(data = world_spdf,
fillColor = ~ifelse(world_spdf$name %in% reported_countries, "#28a745", "#CCCCCC"),
fillOpacity = 0.7,
color = "#FFFFFF",
weight = 1,
highlightOptions = highlightOptions(color = "#FFD700", weight = 2, fillOpacity = 0.9),
label = ~name,
labelOptions = labelOptions(style = list("font-weight" = "bold"), textsize = "12px", direction = "auto"),
popup = ~paste("<strong>Country:</strong>", name)
)
})
# Render Data Table
output$variableTable <- renderDT({
data_wwbi %>%
select(country_name, indicator_name, matches("^year_20(1[0-9]|2[0-2])"))
})
# Dummy outputs for widgets to prevent errors (define actual values in your code)
output$numberIndicatorsBox <- renderInfoBox({
infoBox("Indicators", 100, icon = icon("list"), color = "blue")
})
output$numberCountriesBox <- renderInfoBox({
infoBox("Countries", length(unique(data_wwbi$country_name)), icon = icon("globe"), color = "green")
})
output$temporalCoverageAnnualBox <- renderInfoBox({
infoBox("Temporal Coverage (Annual)", "2000-2022", icon = icon("calendar"), color = "purple")
})
output$temporalCoverageYearsBox <- renderInfoBox({
infoBox("Temporal Coverage (Years)", "22", icon = icon("calendar"), color = "yellow")
})
output$lastUpdatedBox <- renderInfoBox({
infoBox("Last Updated", "2022", icon = icon("clock"), color = "red")
})
}
# Run the app
shinyApp(ui, server)
runApp('Code/02-shiny-dashboard.R')
runApp('Code/02-shiny-dashboard.R')
runApp('Code/02-shiny-dashboard.R')
runApp('Code/02-shiny-dashboard.R')
runApp('Code/02-shiny-dashboard.R')
runApp('Code/02-shiny-dashboard.R')
runApp('Code/02-shiny-dashboard.R')
runApp('Code/02-shiny-dashboard.R')
